
wavplayer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000185e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008c  00800060  0000185e  000018f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000469  008000ec  008000ec  0000197e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000197e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000198  00000000  00000000  000019ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000028c5  00000000  00000000  00001b46  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000988  00000000  00000000  0000440b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b5b  00000000  00000000  00004d93  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006d0  00000000  00000000  000058f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006b3  00000000  00000000  00005fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002e67  00000000  00000000  00006673  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000200  00000000  00000000  000094da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
//		 Ustawienie wszystkich 4 linii danych jako WYjœcia
//
//----------------------------------------------------------------------------------------
static inline void data_dir_out(void)
{
	DDR(LCD_D7PORT)	|= (1<<LCD_D7);
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
	DDR(LCD_D6PORT)	|= (1<<LCD_D6);
	DDR(LCD_D5PORT)	|= (1<<LCD_D5);
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
void lcd_init(void)
{
	// inicjowanie pinów portów ustalonych do pod³¹czenia z wyœwietlaczem LCD
	// ustawienie wszystkich jako wyjœcia
	data_dir_out();
	DDR(LCD_RSPORT) |= (1<<LCD_RS);
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
	DDR(LCD_EPORT) |= (1<<LCD_E);
	#if USE_RW == 1
		DDR(LCD_RWPORT) |= (1<<LCD_RW);
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
	#endif

	PORT(LCD_RSPORT) |= (1<<LCD_RS);
	PORT(LCD_EPORT) |= (1<<LCD_E);
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
	#if USE_RW == 1
		PORT(LCD_RWPORT) |= (1<<LCD_RW);
	#endif

	_delay_ms(15);
	PORT(LCD_EPORT) &= ~(1<<LCD_E);
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
	PORT(LCD_RSPORT) &= ~(1<<LCD_RS);
	PORT(LCD_RWPORT) &= ~(1<<LCD_RW);
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
//		 Wys³anie po³ówki bajtu do LCD (D4..D7)
//
//----------------------------------------------------------------------------------------
static inline void lcd_sendHalf(uint8_t data)
{
	if (data&(1<<0)) PORT(LCD_D4PORT) |= (1<<LCD_D4); else PORT(LCD_D4PORT) &= ~(1<<LCD_D4);
      28:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <__vector_10>
	if (data&(1<<1)) PORT(LCD_D5PORT) |= (1<<LCD_D5); else PORT(LCD_D5PORT) &= ~(1<<LCD_D5);
	if (data&(1<<2)) PORT(LCD_D6PORT) |= (1<<LCD_D6); else PORT(LCD_D6PORT) &= ~(1<<LCD_D6);
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
	PORT(LCD_RWPORT) &= ~(1<<LCD_RW);

	// jeszcze nie mo¿na u¿ywaæ Busy Flag
	SET_E;
	lcd_sendHalf(0x03);	// tryb 8-bitowy
	CLR_E;
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
//		 Wys³anie po³ówki bajtu do LCD (D4..D7)
//
//----------------------------------------------------------------------------------------
static inline void lcd_sendHalf(uint8_t data)
{
	if (data&(1<<0)) PORT(LCD_D4PORT) |= (1<<LCD_D4); else PORT(LCD_D4PORT) &= ~(1<<LCD_D4);
      40:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__vector_16>
	if (data&(1<<1)) PORT(LCD_D5PORT) |= (1<<LCD_D5); else PORT(LCD_D5PORT) &= ~(1<<LCD_D5);
	if (data&(1<<2)) PORT(LCD_D6PORT) |= (1<<LCD_D6); else PORT(LCD_D6PORT) &= ~(1<<LCD_D6);
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
	CLR_E;
	_delay_ms(4.1);

	SET_E;
	lcd_sendHalf(0x03);	// tryb 8-bitowy
	CLR_E;
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
	_delay_us(100);

	SET_E;
      56:	1f be       	out	0x3f, r1	; 63
//		 Wys³anie po³ówki bajtu do LCD (D4..D7)
//
//----------------------------------------------------------------------------------------
static inline void lcd_sendHalf(uint8_t data)
{
	if (data&(1<<0)) PORT(LCD_D4PORT) |= (1<<LCD_D4); else PORT(LCD_D4PORT) &= ~(1<<LCD_D4);
      58:	cf e5       	ldi	r28, 0x5F	; 95
	if (data&(1<<1)) PORT(LCD_D5PORT) |= (1<<LCD_D5); else PORT(LCD_D5PORT) &= ~(1<<LCD_D5);
      5a:	d8 e0       	ldi	r29, 0x08	; 8
	if (data&(1<<2)) PORT(LCD_D6PORT) |= (1<<LCD_D6); else PORT(LCD_D6PORT) &= ~(1<<LCD_D6);
      5c:	de bf       	out	0x3e, r29	; 62
	if (data&(1<<3)) PORT(LCD_D7PORT) |= (1<<LCD_D7); else PORT(LCD_D7PORT) &= ~(1<<LCD_D7);
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
	CLR_E;
	_delay_us(100);

	SET_E;
	lcd_sendHalf(0x03);	// tryb 8-bitowy
	CLR_E;
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e5       	ldi	r30, 0x5E	; 94
      68:	f8 e1       	ldi	r31, 0x18	; 24
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
	_delay_us(100);

	SET_E;
      6e:	0d 92       	st	X+, r0
//		 Wys³anie po³ówki bajtu do LCD (D4..D7)
//
//----------------------------------------------------------------------------------------
static inline void lcd_sendHalf(uint8_t data)
{
	if (data&(1<<0)) PORT(LCD_D4PORT) |= (1<<LCD_D4); else PORT(LCD_D4PORT) &= ~(1<<LCD_D4);
      70:	ac 3e       	cpi	r26, 0xEC	; 236
	if (data&(1<<1)) PORT(LCD_D5PORT) |= (1<<LCD_D5); else PORT(LCD_D5PORT) &= ~(1<<LCD_D5);
      72:	b1 07       	cpc	r27, r17
	if (data&(1<<2)) PORT(LCD_D6PORT) |= (1<<LCD_D6); else PORT(LCD_D6PORT) &= ~(1<<LCD_D6);
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
	if (data&(1<<3)) PORT(LCD_D7PORT) |= (1<<LCD_D7); else PORT(LCD_D7PORT) &= ~(1<<LCD_D7);
      76:	25 e0       	ldi	r18, 0x05	; 5
	CLR_E;
	_delay_us(100);

	SET_E;
	lcd_sendHalf(0x02);// tryb 4-bitowy
	CLR_E;
      78:	ac ee       	ldi	r26, 0xEC	; 236
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 35       	cpi	r26, 0x55	; 85
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
	_delay_us(100);
	// ju¿ mo¿na u¿ywaæ Busy Flag
	// tryb 4-bitowy, 2 wiersze, znak 5x7
	lcd_write_cmd( LCDC_FUNC|LCDC_FUNC4B|LCDC_FUNC2L|LCDC_FUNC5x7 );
      86:	0e 94 9c 00 	call	0x138	; 0x138 <main>
      8a:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <_exit>

0000008e <__bad_interrupt>:
	// wy³¹czenie kursora
	lcd_write_cmd( LCDC_ONOFF|LCDC_CURSOROFF );
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <play>:
	// w³¹czenie wyœwietlacza
	lcd_write_cmd( LCDC_ONOFF|LCDC_DISPLAYON );
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	0e 94 1e 09 	call	0x123c	; 0x123c <pf_open>
	// przesuwanie kursora w prawo bez przesuwania zawartoœci ekranu
	lcd_write_cmd( LCDC_ENTRY|LCDC_ENTRYR );
      9a:	c8 2f       	mov	r28, r24
      9c:	81 11       	cpse	r24, r1

	// kasowanie ekranu
	lcd_cls();
      9e:	47 c0       	rjmp	.+142    	; 0x12e <play+0x9c>
      a0:	88 e0       	ldi	r24, 0x08	; 8
      a2:	80 93 26 05 	sts	0x0526, r24
	FRESULT res;

	if ((res = pf_open(fn)) == FR_OK) {

		FLAGS.resolution = 8;
		FLAGS.stereo = 0;
      a6:	e5 e2       	ldi	r30, 0x25	; 37
      a8:	f5 e0       	ldi	r31, 0x05	; 5
      aa:	80 81       	ld	r24, Z
      ac:	8e 7f       	andi	r24, 0xFE	; 254
      ae:	80 83       	st	Z, r24

		pf_lseek(0);
      b0:	60 e0       	ldi	r22, 0x00	; 0
      b2:	70 e0       	ldi	r23, 0x00	; 0
      b4:	cb 01       	movw	r24, r22
      b6:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <pf_lseek>

		pf_read(&buf[0][0], BUF_SIZE , &rb);	// za³aduj pierwsz¹ czêœæ bufora
      ba:	42 e1       	ldi	r20, 0x12	; 18
      bc:	51 e0       	ldi	r21, 0x01	; 1
      be:	60 e0       	ldi	r22, 0x00	; 0
      c0:	72 e0       	ldi	r23, 0x02	; 2
      c2:	85 e2       	ldi	r24, 0x25	; 37
      c4:	91 e0       	ldi	r25, 0x01	; 1
      c6:	0e 94 7d 09 	call	0x12fa	; 0x12fa <pf_read>
		pf_read(&buf[1][0], BUF_SIZE , &rb);	// za³aduj drug¹ czêœæ bufora
      ca:	42 e1       	ldi	r20, 0x12	; 18
      cc:	51 e0       	ldi	r21, 0x01	; 1
      ce:	60 e0       	ldi	r22, 0x00	; 0
      d0:	72 e0       	ldi	r23, 0x02	; 2
      d2:	85 e2       	ldi	r24, 0x25	; 37
      d4:	93 e0       	ldi	r25, 0x03	; 3
      d6:	0e 94 7d 09 	call	0x12fa	; 0x12fa <pf_read>

		TMR_START;		// start Timera0 (samplowanie)
      da:	83 b7       	in	r24, 0x33	; 51
      dc:	82 60       	ori	r24, 0x02	; 2
      de:	83 bf       	out	0x33, r24	; 51
		//DDRD  |= (1<<PD5)|(1<<PD4);			// ustaw piny PWM1 (OC1A) oraz PWM2 (OC1B) jako wyjœcia WA¯NE !!!

		while(1) {
			if( can_read ) {				// jeœli flaga ustawiona w obs³udze przerwania

				pf_read(&buf[ nr_buf ^ 0x01 ][0], BUF_SIZE , &rb);	// odczytaj kolejny bufor
      e0:	d1 e0       	ldi	r29, 0x01	; 1
		TMR_START;		// start Timera0 (samplowanie)

		//DDRD  |= (1<<PD5)|(1<<PD4);			// ustaw piny PWM1 (OC1A) oraz PWM2 (OC1B) jako wyjœcia WA¯NE !!!

		while(1) {
			if( can_read ) {				// jeœli flaga ustawiona w obs³udze przerwania
      e2:	90 91 24 01 	lds	r25, 0x0124
      e6:	99 23       	and	r25, r25
      e8:	c9 f0       	breq	.+50     	; 0x11c <play+0x8a>

				pf_read(&buf[ nr_buf ^ 0x01 ][0], BUF_SIZE , &rb);	// odczytaj kolejny bufor
      ea:	20 91 11 01 	lds	r18, 0x0111
      ee:	2d 27       	eor	r18, r29
      f0:	30 e0       	ldi	r19, 0x00	; 0
      f2:	c9 01       	movw	r24, r18
      f4:	98 2f       	mov	r25, r24
      f6:	88 27       	eor	r24, r24
      f8:	99 0f       	add	r25, r25
      fa:	42 e1       	ldi	r20, 0x12	; 18
      fc:	51 e0       	ldi	r21, 0x01	; 1
      fe:	60 e0       	ldi	r22, 0x00	; 0
     100:	72 e0       	ldi	r23, 0x02	; 2
     102:	8b 5d       	subi	r24, 0xDB	; 219
     104:	9e 4f       	sbci	r25, 0xFE	; 254
     106:	0e 94 7d 09 	call	0x12fa	; 0x12fa <pf_read>
				if( rb < BUF_SIZE ) break;		// jeœli koniec pliku przerwij pêtlê while(1)
     10a:	20 91 12 01 	lds	r18, 0x0112
     10e:	30 91 13 01 	lds	r19, 0x0113
     112:	21 15       	cp	r18, r1
     114:	32 40       	sbci	r19, 0x02	; 2
     116:	40 f0       	brcs	.+16     	; 0x128 <play+0x96>

				// klawisz do zmiany utworu na nastêpny
				//if( !(PINB & (1<<PB0)) ) break;

				can_read = 0;
     118:	10 92 24 01 	sts	0x0124, r1
			if((xaxis<swingthresholdlow || yaxis<swingthresholdlow || zaxis<swingthresholdlow || xaxis>swingthresholdhigh1 || yaxis>swingthresholdhigh1 || zaxis>swingthresholdhigh1) && (breakdisablehigh != 1 || breakdisablelow==1))
			{
				hitpriority=2;
				break;
			}*/
			if (playstop==1) 
     11c:	90 91 f0 00 	lds	r25, 0x00F0
     120:	91 30       	cpi	r25, 0x01	; 1
     122:	f9 f6       	brne	.-66     	; 0xe2 <play+0x50>
			{
				playstop=0;
     124:	10 92 f0 00 	sts	0x00F0, r1
			}
		}

		//DDRD  &= ~((1<<PD5)|(1<<PD4));		// ustaw piny PWM1 (OC1A) oraz PWM2 (OC1B) jako wejœcia WA¯NE !!!

		TMR_STOP;	// wy³¹czenie Timera0 (samplowania)
     128:	83 b7       	in	r24, 0x33	; 51
     12a:	8d 7f       	andi	r24, 0xFD	; 253
     12c:	83 bf       	out	0x33, r24	; 51
		//_delay_ms(500);						// przerwa 0,5s
	}

	return res;
}
     12e:	8c 2f       	mov	r24, r28
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	df 91       	pop	r29
     134:	cf 91       	pop	r28
     136:	08 95       	ret

00000138 <main>:
}

//! **************** main() ***********************************************
int main(void) {

	DDRD  |= (1<<PD5)|(1<<PD4);			// ustaw piny PWM1 (OC1A) oraz PWM2 (OC1B) jako wyjœcia WA¯NE !!!
     138:	81 b3       	in	r24, 0x11	; 17
     13a:	80 63       	ori	r24, 0x30	; 48
     13c:	81 bb       	out	0x11, r24	; 17
	PORTB = 0b00001111;					// podci¹gniêcie PORTB do VCC
     13e:	8f e0       	ldi	r24, 0x0F	; 15
     140:	88 bb       	out	0x18, r24	; 24

	DDRB |= (1<<PB1);				// wyjœcie do sterowania zasilaniem karty SD
     142:	b9 9a       	sbi	0x17, 1	; 23

	//PORTD |= (1<<PD2)|(1<<PD3);		// podci¹gniêcie wyjœæ
	//PORTB |= (1<<PB0);				// klawiszy do VCC

	// init SPI
	DDRB |= (1<<CS)|(1<<MOSI)|(1<<SCK)|(1<<CS);
     144:	87 b3       	in	r24, 0x17	; 23
     146:	80 6b       	ori	r24, 0xB0	; 176
     148:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1<<CS);
     14a:	c4 9a       	sbi	0x18, 4	; 24
	SPCR |= (1<<SPE)|(1<<MSTR);		
     14c:	8d b1       	in	r24, 0x0d	; 13
     14e:	80 65       	ori	r24, 0x50	; 80
     150:	8d b9       	out	0x0d, r24	; 13
	SPSR |= (1<<SPI2X);				// masymalny zegar SCK
     152:	70 9a       	sbi	0x0e, 0	; 14

	// konfiguracja PWM (Timer1) noœna
	TCCR1A = (1<<WGM10)|(1<<COM1A1)|(0<<COM1A0)|(1<<COM1B1);//|(1<<COM1B0);
     154:	81 ea       	ldi	r24, 0xA1	; 161
     156:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<CS10);
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	8e bd       	out	0x2e, r24	; 46

	// konfiguracja Timer0 (samplowanie)
	TCCR0 = (1<<WGM01);		// tryb CTC
     15c:	88 e0       	ldi	r24, 0x08	; 8
     15e:	83 bf       	out	0x33, r24	; 51
	TIMSK = (1<<OCIE0);		// zezwolenie na przerwanie CompareMatch
     160:	82 e0       	ldi	r24, 0x02	; 2
     162:	89 bf       	out	0x39, r24	; 57

	sei();		// globalne zezwolenie na przerwania
     164:	78 94       	sei
	
	OCR0 = (uint8_t)44;						//bo F_CPU/8/samplerate	
     166:	8c e2       	ldi	r24, 0x2C	; 44
     168:	8c bf       	out	0x3c, r24	; 60
	lcd_locate(2,0);
	lcd_str("Y:");
	lcd_locate(3,0);
	lcd_str("Z:");*/
	
	ADCSRA |= 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0;
     16a:	86 b1       	in	r24, 0x06	; 6
     16c:	87 60       	ori	r24, 0x07	; 7
     16e:	86 b9       	out	0x06, r24	; 6
	ADMUX |= 1<<REFS0 | 1<<REFS1; // | 1<<ADLAR;
     170:	87 b1       	in	r24, 0x07	; 7
     172:	80 6c       	ori	r24, 0xC0	; 192
     174:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= 1<<ADIE;
     176:	33 9a       	sbi	0x06, 3	; 6
	ADCSRA |= 1<<ADEN;
     178:	37 9a       	sbi	0x06, 7	; 6
				swingcounter=0;
			}
		}
		if (hitpriority==2)
		{
			breakdisablehigh=1;
     17a:	c1 e0       	ldi	r28, 0x01	; 1



	// **************** pêtla g³ówna **********************************
	while(1) {
		if (pf_mount(&Fs)) continue;	/* Initialize FS */
     17c:	89 e2       	ldi	r24, 0x29	; 41
     17e:	95 e0       	ldi	r25, 0x05	; 5
     180:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <pf_mount>
     184:	81 11       	cpse	r24, r1
     186:	fa cf       	rjmp	.-12     	; 0x17c <main+0x44>

		for (;;) {

			if (pf_opendir(&Dir, "")) break;	/* Open sound file directory (root dir) */
     188:	69 ec       	ldi	r22, 0xC9	; 201
     18a:	70 e0       	ldi	r23, 0x00	; 0
     18c:	84 e1       	ldi	r24, 0x14	; 20
     18e:	91 e0       	ldi	r25, 0x01	; 1
     190:	0e 94 9e 0b 	call	0x173c	; 0x173c <pf_opendir>
     194:	81 11       	cpse	r24, r1
     196:	f2 cf       	rjmp	.-28     	; 0x17c <main+0x44>
				//}
			//}
		//if (play("star3.wav")) break;		
		//play("startup.wav");
		//for (;;) play("hum.wav");
		if (startup==1)
     198:	80 91 60 00 	lds	r24, 0x0060
     19c:	81 30       	cpi	r24, 0x01	; 1
     19e:	41 f4       	brne	.+16     	; 0x1b0 <main+0x78>
		{
			if (play("startup.wav")) break;
     1a0:	81 e9       	ldi	r24, 0x91	; 145
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	0e 94 49 00 	call	0x92	; 0x92 <play>
     1a8:	89 2b       	or	r24, r25
     1aa:	41 f7       	brne	.-48     	; 0x17c <main+0x44>
			startup=0;
     1ac:	10 92 60 00 	sts	0x0060, r1
		}
		
		
		if (hitpriority==1)
     1b0:	80 91 f5 00 	lds	r24, 0x00F5
     1b4:	81 30       	cpi	r24, 0x01	; 1
     1b6:	c1 f5       	brne	.+112    	; 0x228 <main+0xf0>
		{
			breakdisablehigh=1;
     1b8:	c0 93 f4 00 	sts	0x00F4, r28
			breakdisablelow=1;
     1bc:	c0 93 f3 00 	sts	0x00F3, r28
			swingnumber=swing[swingcounter];
     1c0:	e0 91 f1 00 	lds	r30, 0x00F1
     1c4:	f0 e0       	ldi	r31, 0x00	; 0
     1c6:	ee 0f       	add	r30, r30
     1c8:	ff 1f       	adc	r31, r31
     1ca:	ee 59       	subi	r30, 0x9E	; 158
     1cc:	ff 4f       	sbci	r31, 0xFF	; 255
     1ce:	80 81       	ld	r24, Z
     1d0:	91 81       	ldd	r25, Z+1	; 0x01
     1d2:	80 93 61 00 	sts	0x0061, r24
			if (swingnumber==1)
     1d6:	80 91 61 00 	lds	r24, 0x0061
     1da:	81 30       	cpi	r24, 0x01	; 1
     1dc:	21 f4       	brne	.+8      	; 0x1e6 <main+0xae>
			{
				play("star3.wav");
     1de:	8d e9       	ldi	r24, 0x9D	; 157
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	0e 94 49 00 	call	0x92	; 0x92 <play>
			}
			if (swingnumber==2)
     1e6:	80 91 61 00 	lds	r24, 0x0061
     1ea:	82 30       	cpi	r24, 0x02	; 2
     1ec:	21 f4       	brne	.+8      	; 0x1f6 <main+0xbe>
			{
				play("swing2.wav");
     1ee:	87 ea       	ldi	r24, 0xA7	; 167
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	0e 94 49 00 	call	0x92	; 0x92 <play>
			}
			if (swingnumber==3)
     1f6:	80 91 61 00 	lds	r24, 0x0061
     1fa:	83 30       	cpi	r24, 0x03	; 3
     1fc:	21 f4       	brne	.+8      	; 0x206 <main+0xce>
			{
				play("swing3.wav");
     1fe:	82 eb       	ldi	r24, 0xB2	; 178
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	0e 94 49 00 	call	0x92	; 0x92 <play>
			}
			hitpriority=0;
     206:	10 92 f5 00 	sts	0x00F5, r1
			breakdisablehigh=0;
     20a:	10 92 f4 00 	sts	0x00F4, r1
			breakdisablelow=0;
     20e:	10 92 f3 00 	sts	0x00F3, r1
			swingcounter++;
     212:	80 91 f1 00 	lds	r24, 0x00F1
     216:	8f 5f       	subi	r24, 0xFF	; 255
     218:	80 93 f1 00 	sts	0x00F1, r24
			if (swingcounter==9)
     21c:	80 91 f1 00 	lds	r24, 0x00F1
     220:	89 30       	cpi	r24, 0x09	; 9
     222:	11 f4       	brne	.+4      	; 0x228 <main+0xf0>
			{
				swingcounter=0;
     224:	10 92 f1 00 	sts	0x00F1, r1
			}
		}
		if (hitpriority==2)
     228:	80 91 f5 00 	lds	r24, 0x00F5
     22c:	82 30       	cpi	r24, 0x02	; 2
     22e:	c1 f5       	brne	.+112    	; 0x2a0 <main+0x168>
		{
			breakdisablehigh=1;
     230:	c0 93 f4 00 	sts	0x00F4, r28
			breakdisablelow=0;
     234:	10 92 f3 00 	sts	0x00F3, r1
			hitnumber=hit[hitcounter];
     238:	e0 91 f2 00 	lds	r30, 0x00F2
     23c:	f0 e0       	ldi	r31, 0x00	; 0
     23e:	ee 0f       	add	r30, r30
     240:	ff 1f       	adc	r31, r31
     242:	e9 58       	subi	r30, 0x89	; 137
     244:	ff 4f       	sbci	r31, 0xFF	; 255
     246:	80 81       	ld	r24, Z
     248:	91 81       	ldd	r25, Z+1	; 0x01
     24a:	80 93 76 00 	sts	0x0076, r24
			if (hitnumber==1)
     24e:	80 91 76 00 	lds	r24, 0x0076
     252:	81 30       	cpi	r24, 0x01	; 1
     254:	21 f4       	brne	.+8      	; 0x25e <main+0x126>
			{
				play("lasrhit1.wav");
     256:	8d eb       	ldi	r24, 0xBD	; 189
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	0e 94 49 00 	call	0x92	; 0x92 <play>
			}
			if (hitnumber==2)
     25e:	80 91 76 00 	lds	r24, 0x0076
     262:	82 30       	cpi	r24, 0x02	; 2
     264:	21 f4       	brne	.+8      	; 0x26e <main+0x136>
			{
				play("lasrhit2.wav");
     266:	8a ec       	ldi	r24, 0xCA	; 202
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	0e 94 49 00 	call	0x92	; 0x92 <play>
			}
			if (hitnumber==3)
     26e:	80 91 76 00 	lds	r24, 0x0076
     272:	83 30       	cpi	r24, 0x03	; 3
     274:	21 f4       	brne	.+8      	; 0x27e <main+0x146>
			{
				play("lasrhit3.wav");
     276:	87 ed       	ldi	r24, 0xD7	; 215
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	0e 94 49 00 	call	0x92	; 0x92 <play>
			}
			hitpriority=0;
     27e:	10 92 f5 00 	sts	0x00F5, r1
			breakdisablehigh=0;	
     282:	10 92 f4 00 	sts	0x00F4, r1
			hitcounter++;
     286:	80 91 f2 00 	lds	r24, 0x00F2
     28a:	8f 5f       	subi	r24, 0xFF	; 255
     28c:	80 93 f2 00 	sts	0x00F2, r24
			if (hitcounter==9)
     290:	80 91 f2 00 	lds	r24, 0x00F2
     294:	89 30       	cpi	r24, 0x09	; 9
     296:	09 f0       	breq	.+2      	; 0x29a <main+0x162>
     298:	77 cf       	rjmp	.-274    	; 0x188 <main+0x50>
			{
				hitcounter=0;
     29a:	10 92 f2 00 	sts	0x00F2, r1
     29e:	74 cf       	rjmp	.-280    	; 0x188 <main+0x50>
			}
		}
		else
		{
			if (play("hum.wav")) break;	
     2a0:	84 ee       	ldi	r24, 0xE4	; 228
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	0e 94 49 00 	call	0x92	; 0x92 <play>
     2a8:	89 2b       	or	r24, r25
     2aa:	09 f4       	brne	.+2      	; 0x2ae <main+0x176>
     2ac:	6d cf       	rjmp	.-294    	; 0x188 <main+0x50>
     2ae:	66 cf       	rjmp	.-308    	; 0x17c <main+0x44>

000002b0 <__vector_10>:
}
//********************************************************************************************


//***************** przerwanie TIMER0 - samplowanie ******************************************
ISR(TIMER0_COMP_vect) {
     2b0:	1f 92       	push	r1
     2b2:	0f 92       	push	r0
     2b4:	0f b6       	in	r0, 0x3f	; 63
     2b6:	0f 92       	push	r0
     2b8:	11 24       	eor	r1, r1
     2ba:	2f 93       	push	r18
     2bc:	3f 93       	push	r19
     2be:	8f 93       	push	r24
     2c0:	9f 93       	push	r25
     2c2:	ef 93       	push	r30
     2c4:	ff 93       	push	r31
	
	
	static uint16_t buf_idx;		// indeks w pojedynczym buforze
	static uint8_t v1, v2;			// zmienne do przechowywania próbek
	
				v1 = buf[nr_buf][buf_idx++];		// pobieramy próbkê MONO do zmiennej v1
     2c6:	e0 91 11 01 	lds	r30, 0x0111
     2ca:	80 91 ee 00 	lds	r24, 0x00EE
     2ce:	90 91 ef 00 	lds	r25, 0x00EF
     2d2:	9c 01       	movw	r18, r24
     2d4:	2f 5f       	subi	r18, 0xFF	; 255
     2d6:	3f 4f       	sbci	r19, 0xFF	; 255
     2d8:	30 93 ef 00 	sts	0x00EF, r19
     2dc:	20 93 ee 00 	sts	0x00EE, r18
     2e0:	f0 e0       	ldi	r31, 0x00	; 0
     2e2:	fe 2f       	mov	r31, r30
     2e4:	ee 27       	eor	r30, r30
     2e6:	ff 0f       	add	r31, r31
     2e8:	8e 0f       	add	r24, r30
     2ea:	9f 1f       	adc	r25, r31
     2ec:	fc 01       	movw	r30, r24
     2ee:	eb 5d       	subi	r30, 0xDB	; 219
     2f0:	fe 4f       	sbci	r31, 0xFE	; 254
     2f2:	80 81       	ld	r24, Z
     2f4:	80 93 ed 00 	sts	0x00ED, r24
				v2 = v1;							// to samo na dwa kana³y/wyjœcia
     2f8:	80 93 ec 00 	sts	0x00EC, r24

	OCR1A = v1;									// próbka na wyjœcie PWM1, kana³ L
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	9b bd       	out	0x2b, r25	; 43
     300:	8a bd       	out	0x2a, r24	; 42
	OCR1B = v2;									// próbka na wyjœcie PWM2, kana³ R
     302:	80 91 ec 00 	lds	r24, 0x00EC
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	99 bd       	out	0x29, r25	; 41
     30a:	88 bd       	out	0x28, r24	; 40

	if( buf_idx > BUF_SIZE-1 ) {
     30c:	80 91 ee 00 	lds	r24, 0x00EE
     310:	90 91 ef 00 	lds	r25, 0x00EF
     314:	81 15       	cp	r24, r1
     316:	92 40       	sbci	r25, 0x02	; 2
     318:	60 f0       	brcs	.+24     	; 0x332 <__vector_10+0x82>
		buf_idx=0;								// reset indeksu bufora
     31a:	10 92 ef 00 	sts	0x00EF, r1
     31e:	10 92 ee 00 	sts	0x00EE, r1
		can_read = 1;							// flaga = 1
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	80 93 24 01 	sts	0x0124, r24
		nr_buf ^= 0x01;							// zmiana bufora na kolejny
     328:	90 91 11 01 	lds	r25, 0x0111
     32c:	89 27       	eor	r24, r25
     32e:	80 93 11 01 	sts	0x0111, r24
	}
	ADCSRA |= 1<<ADSC;	
     332:	36 9a       	sbi	0x06, 6	; 6
}
     334:	ff 91       	pop	r31
     336:	ef 91       	pop	r30
     338:	9f 91       	pop	r25
     33a:	8f 91       	pop	r24
     33c:	3f 91       	pop	r19
     33e:	2f 91       	pop	r18
     340:	0f 90       	pop	r0
     342:	0f be       	out	0x3f, r0	; 63
     344:	0f 90       	pop	r0
     346:	1f 90       	pop	r1
     348:	18 95       	reti

0000034a <__vector_16>:

	return res;
}

ISR(ADC_vect)
{
     34a:	1f 92       	push	r1
     34c:	0f 92       	push	r0
     34e:	0f b6       	in	r0, 0x3f	; 63
     350:	0f 92       	push	r0
     352:	11 24       	eor	r1, r1
     354:	2f 93       	push	r18
     356:	8f 93       	push	r24
     358:	9f 93       	push	r25
	
	char adcResult[4];
	uint8_t theLow = ADCL;
     35a:	84 b1       	in	r24, 0x04	; 4
	uint16_t theTenBitResult = ADCH<<8 | theLow;
     35c:	25 b1       	in	r18, 0x05	; 5
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	92 2b       	or	r25, r18
	//itoa(theTenBitResult, adcResult, 10);
	switch (ADMUX)
     362:	27 b1       	in	r18, 0x07	; 7
     364:	21 3c       	cpi	r18, 0xC1	; 193
     366:	59 f0       	breq	.+22     	; 0x37e <__vector_16+0x34>
     368:	22 3c       	cpi	r18, 0xC2	; 194
     36a:	81 f0       	breq	.+32     	; 0x38c <__vector_16+0x42>
     36c:	20 3c       	cpi	r18, 0xC0	; 192
     36e:	a1 f4       	brne	.+40     	; 0x398 <__vector_16+0x4e>
	{
		case 0b11000000:
		xaxis=theTenBitResult;
     370:	90 93 90 00 	sts	0x0090, r25
     374:	80 93 8f 00 	sts	0x008F, r24
		//lcd_locate(0,3);
		//lcd_str(adcResult);
		ADMUX = 0b11000001;
     378:	81 ec       	ldi	r24, 0xC1	; 193
     37a:	87 b9       	out	0x07, r24	; 7
		break;
     37c:	0d c0       	rjmp	.+26     	; 0x398 <__vector_16+0x4e>
		case 0b11000001:
		yaxis=theTenBitResult;
     37e:	90 93 8e 00 	sts	0x008E, r25
     382:	80 93 8d 00 	sts	0x008D, r24
		//lcd_locate(2,3);
		//lcd_str(adcResult);
		ADMUX = 0b11000010;
     386:	82 ec       	ldi	r24, 0xC2	; 194
     388:	87 b9       	out	0x07, r24	; 7
		break;
     38a:	06 c0       	rjmp	.+12     	; 0x398 <__vector_16+0x4e>
		case 0b11000010:
		zaxis=theTenBitResult;
     38c:	90 93 8c 00 	sts	0x008C, r25
     390:	80 93 8b 00 	sts	0x008B, r24
		//lcd_locate(3,3);
		//lcd_str(adcResult);
		ADMUX = 0b11000000;
     394:	80 ec       	ldi	r24, 0xC0	; 192
     396:	87 b9       	out	0x07, r24	; 7
		break;
		default:
		//Default code
		break;
	}
	if(((xaxis<swingthresholdhigh && xaxis>swingthresholdlow) || (yaxis<swingthresholdhigh && yaxis>swingthresholdlow) || (zaxis<swingthresholdhigh && zaxis>swingthresholdlow) || (xaxis<swingthresholdhigh1 && xaxis>swingthresholdlow1) || (yaxis<swingthresholdhigh1 && yaxis>swingthresholdlow1) || (zaxis<swingthresholdhigh1 && zaxis>swingthresholdlow1)) && breakdisablehigh != 1 && breakdisablelow !=1)
     398:	80 91 8f 00 	lds	r24, 0x008F
     39c:	90 91 90 00 	lds	r25, 0x0090
     3a0:	86 32       	cpi	r24, 0x26	; 38
     3a2:	92 40       	sbci	r25, 0x02	; 2
     3a4:	40 f4       	brcc	.+16     	; 0x3b6 <__vector_16+0x6c>
     3a6:	80 91 8f 00 	lds	r24, 0x008F
     3aa:	90 91 90 00 	lds	r25, 0x0090
     3ae:	85 3f       	cpi	r24, 0xF5	; 245
     3b0:	91 40       	sbci	r25, 0x01	; 1
     3b2:	08 f0       	brcs	.+2      	; 0x3b6 <__vector_16+0x6c>
     3b4:	46 c0       	rjmp	.+140    	; 0x442 <__vector_16+0xf8>
     3b6:	80 91 8d 00 	lds	r24, 0x008D
     3ba:	90 91 8e 00 	lds	r25, 0x008E
     3be:	86 32       	cpi	r24, 0x26	; 38
     3c0:	92 40       	sbci	r25, 0x02	; 2
     3c2:	38 f4       	brcc	.+14     	; 0x3d2 <__vector_16+0x88>
     3c4:	80 91 8d 00 	lds	r24, 0x008D
     3c8:	90 91 8e 00 	lds	r25, 0x008E
     3cc:	85 3f       	cpi	r24, 0xF5	; 245
     3ce:	91 40       	sbci	r25, 0x01	; 1
     3d0:	c0 f5       	brcc	.+112    	; 0x442 <__vector_16+0xf8>
     3d2:	80 91 8b 00 	lds	r24, 0x008B
     3d6:	90 91 8c 00 	lds	r25, 0x008C
     3da:	86 32       	cpi	r24, 0x26	; 38
     3dc:	92 40       	sbci	r25, 0x02	; 2
     3de:	38 f4       	brcc	.+14     	; 0x3ee <__vector_16+0xa4>
     3e0:	80 91 8b 00 	lds	r24, 0x008B
     3e4:	90 91 8c 00 	lds	r25, 0x008C
     3e8:	85 3f       	cpi	r24, 0xF5	; 245
     3ea:	91 40       	sbci	r25, 0x01	; 1
     3ec:	50 f5       	brcc	.+84     	; 0x442 <__vector_16+0xf8>
     3ee:	80 91 8f 00 	lds	r24, 0x008F
     3f2:	90 91 90 00 	lds	r25, 0x0090
     3f6:	8c 35       	cpi	r24, 0x5C	; 92
     3f8:	93 40       	sbci	r25, 0x03	; 3
     3fa:	38 f4       	brcc	.+14     	; 0x40a <__vector_16+0xc0>
     3fc:	80 91 8f 00 	lds	r24, 0x008F
     400:	90 91 90 00 	lds	r25, 0x0090
     404:	8b 32       	cpi	r24, 0x2B	; 43
     406:	93 40       	sbci	r25, 0x03	; 3
     408:	e0 f4       	brcc	.+56     	; 0x442 <__vector_16+0xf8>
     40a:	80 91 8d 00 	lds	r24, 0x008D
     40e:	90 91 8e 00 	lds	r25, 0x008E
     412:	8c 35       	cpi	r24, 0x5C	; 92
     414:	93 40       	sbci	r25, 0x03	; 3
     416:	38 f4       	brcc	.+14     	; 0x426 <__vector_16+0xdc>
     418:	80 91 8d 00 	lds	r24, 0x008D
     41c:	90 91 8e 00 	lds	r25, 0x008E
     420:	8b 32       	cpi	r24, 0x2B	; 43
     422:	93 40       	sbci	r25, 0x03	; 3
     424:	70 f4       	brcc	.+28     	; 0x442 <__vector_16+0xf8>
     426:	80 91 8b 00 	lds	r24, 0x008B
     42a:	90 91 8c 00 	lds	r25, 0x008C
     42e:	8c 35       	cpi	r24, 0x5C	; 92
     430:	93 40       	sbci	r25, 0x03	; 3
     432:	a0 f4       	brcc	.+40     	; 0x45c <__vector_16+0x112>
     434:	80 91 8b 00 	lds	r24, 0x008B
     438:	90 91 8c 00 	lds	r25, 0x008C
     43c:	8b 32       	cpi	r24, 0x2B	; 43
     43e:	93 40       	sbci	r25, 0x03	; 3
     440:	68 f0       	brcs	.+26     	; 0x45c <__vector_16+0x112>
     442:	80 91 f4 00 	lds	r24, 0x00F4
     446:	81 30       	cpi	r24, 0x01	; 1
     448:	49 f0       	breq	.+18     	; 0x45c <__vector_16+0x112>
     44a:	80 91 f3 00 	lds	r24, 0x00F3
     44e:	81 30       	cpi	r24, 0x01	; 1
     450:	29 f0       	breq	.+10     	; 0x45c <__vector_16+0x112>
	{
		hitpriority=1;
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	80 93 f5 00 	sts	0x00F5, r24
		playstop=1;
     458:	80 93 f0 00 	sts	0x00F0, r24
		//break;
	}
	if((xaxis<swingthresholdlow || yaxis<swingthresholdlow || zaxis<swingthresholdlow || xaxis>swingthresholdhigh1 || yaxis>swingthresholdhigh1 || zaxis>swingthresholdhigh1) && (breakdisablehigh != 1 || breakdisablelow==1))
     45c:	80 91 8f 00 	lds	r24, 0x008F
     460:	90 91 90 00 	lds	r25, 0x0090
     464:	84 3f       	cpi	r24, 0xF4	; 244
     466:	91 40       	sbci	r25, 0x01	; 1
     468:	18 f1       	brcs	.+70     	; 0x4b0 <__vector_16+0x166>
     46a:	80 91 8d 00 	lds	r24, 0x008D
     46e:	90 91 8e 00 	lds	r25, 0x008E
     472:	84 3f       	cpi	r24, 0xF4	; 244
     474:	91 40       	sbci	r25, 0x01	; 1
     476:	e0 f0       	brcs	.+56     	; 0x4b0 <__vector_16+0x166>
     478:	80 91 8b 00 	lds	r24, 0x008B
     47c:	90 91 8c 00 	lds	r25, 0x008C
     480:	84 3f       	cpi	r24, 0xF4	; 244
     482:	91 40       	sbci	r25, 0x01	; 1
     484:	a8 f0       	brcs	.+42     	; 0x4b0 <__vector_16+0x166>
     486:	80 91 8f 00 	lds	r24, 0x008F
     48a:	90 91 90 00 	lds	r25, 0x0090
     48e:	8d 35       	cpi	r24, 0x5D	; 93
     490:	93 40       	sbci	r25, 0x03	; 3
     492:	70 f4       	brcc	.+28     	; 0x4b0 <__vector_16+0x166>
     494:	80 91 8d 00 	lds	r24, 0x008D
     498:	90 91 8e 00 	lds	r25, 0x008E
     49c:	8d 35       	cpi	r24, 0x5D	; 93
     49e:	93 40       	sbci	r25, 0x03	; 3
     4a0:	38 f4       	brcc	.+14     	; 0x4b0 <__vector_16+0x166>
     4a2:	80 91 8b 00 	lds	r24, 0x008B
     4a6:	90 91 8c 00 	lds	r25, 0x008C
     4aa:	8d 35       	cpi	r24, 0x5D	; 93
     4ac:	93 40       	sbci	r25, 0x03	; 3
     4ae:	70 f0       	brcs	.+28     	; 0x4cc <__vector_16+0x182>
     4b0:	80 91 f4 00 	lds	r24, 0x00F4
     4b4:	81 30       	cpi	r24, 0x01	; 1
     4b6:	21 f4       	brne	.+8      	; 0x4c0 <__vector_16+0x176>
     4b8:	80 91 f3 00 	lds	r24, 0x00F3
     4bc:	81 30       	cpi	r24, 0x01	; 1
     4be:	31 f4       	brne	.+12     	; 0x4cc <__vector_16+0x182>
	{
		hitpriority=2;
     4c0:	82 e0       	ldi	r24, 0x02	; 2
     4c2:	80 93 f5 00 	sts	0x00F5, r24
		playstop=1;
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	80 93 f0 00 	sts	0x00F0, r24
		//break;
	}
	//ADCSRA |= 1<<ADSC;
}
     4cc:	9f 91       	pop	r25
     4ce:	8f 91       	pop	r24
     4d0:	2f 91       	pop	r18
     4d2:	0f 90       	pop	r0
     4d4:	0f be       	out	0x3f, r0	; 63
     4d6:	0f 90       	pop	r0
     4d8:	1f 90       	pop	r1
     4da:	18 95       	reti

000004dc <rcv_spi>:
#define xmit_spi(dat) 	SPDR=(dat); loop_until_bit_is_set(SPSR,SPIF)

static
BYTE rcv_spi (void)
{
	SPDR = 0xFF;
     4dc:	8f ef       	ldi	r24, 0xFF	; 255
     4de:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     4e0:	77 9b       	sbis	0x0e, 7	; 14
     4e2:	fe cf       	rjmp	.-4      	; 0x4e0 <rcv_spi+0x4>
	return SPDR;
     4e4:	8f b1       	in	r24, 0x0f	; 15
}
     4e6:	08 95       	ret

000004e8 <release_spi>:
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
	DESELECT();
     4e8:	c4 9a       	sbi	0x18, 4	; 24
	rcv_spi();
     4ea:	0e 94 6e 02 	call	0x4dc	; 0x4dc <rcv_spi>
     4ee:	08 95       	ret

000004f0 <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
     4f0:	cf 92       	push	r12
     4f2:	df 92       	push	r13
     4f4:	ef 92       	push	r14
     4f6:	ff 92       	push	r15
     4f8:	cf 93       	push	r28
     4fa:	c8 2f       	mov	r28, r24
     4fc:	6a 01       	movw	r12, r20
     4fe:	7b 01       	movw	r14, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     500:	88 23       	and	r24, r24
     502:	4c f4       	brge	.+18     	; 0x516 <send_cmd+0x26>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
     504:	40 e0       	ldi	r20, 0x00	; 0
     506:	50 e0       	ldi	r21, 0x00	; 0
     508:	ba 01       	movw	r22, r20
     50a:	87 e7       	ldi	r24, 0x77	; 119
     50c:	0e 94 78 02 	call	0x4f0	; 0x4f0 <send_cmd>
		if (res > 1) return res;
     510:	82 30       	cpi	r24, 0x02	; 2
     512:	a0 f5       	brcc	.+104    	; 0x57c <send_cmd+0x8c>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
     514:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card */
	DESELECT();
     516:	c4 9a       	sbi	0x18, 4	; 24
	rcv_spi();
     518:	0e 94 6e 02 	call	0x4dc	; 0x4dc <rcv_spi>
	SELECT();
     51c:	c4 98       	cbi	0x18, 4	; 24
	rcv_spi();
     51e:	0e 94 6e 02 	call	0x4dc	; 0x4dc <rcv_spi>

	/* Send a command packet */
	xmit_spi(cmd);						/* Start + Command index */
     522:	cf b9       	out	0x0f, r28	; 15
     524:	77 9b       	sbis	0x0e, 7	; 14
     526:	fe cf       	rjmp	.-4      	; 0x524 <send_cmd+0x34>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
     528:	4f 2d       	mov	r20, r15
     52a:	55 27       	eor	r21, r21
     52c:	66 27       	eor	r22, r22
     52e:	77 27       	eor	r23, r23
     530:	4f b9       	out	0x0f, r20	; 15
     532:	77 9b       	sbis	0x0e, 7	; 14
     534:	fe cf       	rjmp	.-4      	; 0x532 <send_cmd+0x42>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
     536:	a7 01       	movw	r20, r14
     538:	66 27       	eor	r22, r22
     53a:	77 27       	eor	r23, r23
     53c:	4f b9       	out	0x0f, r20	; 15
     53e:	77 9b       	sbis	0x0e, 7	; 14
     540:	fe cf       	rjmp	.-4      	; 0x53e <send_cmd+0x4e>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
     542:	77 27       	eor	r23, r23
     544:	6f 2d       	mov	r22, r15
     546:	5e 2d       	mov	r21, r14
     548:	4d 2d       	mov	r20, r13
     54a:	4f b9       	out	0x0f, r20	; 15
     54c:	77 9b       	sbis	0x0e, 7	; 14
     54e:	fe cf       	rjmp	.-4      	; 0x54c <send_cmd+0x5c>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
     550:	cf b8       	out	0x0f, r12	; 15
     552:	77 9b       	sbis	0x0e, 7	; 14
     554:	fe cf       	rjmp	.-4      	; 0x552 <send_cmd+0x62>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
     556:	c0 34       	cpi	r28, 0x40	; 64
     558:	21 f0       	breq	.+8      	; 0x562 <send_cmd+0x72>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
     55a:	c8 34       	cpi	r28, 0x48	; 72
     55c:	21 f0       	breq	.+8      	; 0x566 <send_cmd+0x76>
	xmit_spi(cmd);						/* Start + Command index */
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	03 c0       	rjmp	.+6      	; 0x568 <send_cmd+0x78>
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
     562:	85 e9       	ldi	r24, 0x95	; 149
     564:	01 c0       	rjmp	.+2      	; 0x568 <send_cmd+0x78>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
     566:	87 e8       	ldi	r24, 0x87	; 135
	xmit_spi(n);
     568:	8f b9       	out	0x0f, r24	; 15
     56a:	77 9b       	sbis	0x0e, 7	; 14
     56c:	fe cf       	rjmp	.-4      	; 0x56a <send_cmd+0x7a>
     56e:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive a command response */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do {
		res = rcv_spi();
     570:	0e 94 6e 02 	call	0x4dc	; 0x4dc <rcv_spi>
	} while ((res & 0x80) && --n);
     574:	88 23       	and	r24, r24
     576:	14 f4       	brge	.+4      	; 0x57c <send_cmd+0x8c>
     578:	c1 50       	subi	r28, 0x01	; 1
     57a:	d1 f7       	brne	.-12     	; 0x570 <send_cmd+0x80>

	return res;			/* Return with the response value */
}
     57c:	cf 91       	pop	r28
     57e:	ff 90       	pop	r15
     580:	ef 90       	pop	r14
     582:	df 90       	pop	r13
     584:	cf 90       	pop	r12
     586:	08 95       	ret

00000588 <disk_readp>:
	BYTE *buff,		/* Pointer to the read buffer (NULL:Read bytes are forwarded to the stream) */
	DWORD lba,		/* Sector number (LBA) */
	WORD ofs,		/* Byte offset to read from (0..511) */
	WORD cnt		/* Number of bytes to read (ofs + cnt mus be <= 512) */
)
{
     588:	cf 92       	push	r12
     58a:	df 92       	push	r13
     58c:	ef 92       	push	r14
     58e:	ff 92       	push	r15
     590:	0f 93       	push	r16
     592:	1f 93       	push	r17
     594:	cf 93       	push	r28
     596:	df 93       	push	r29
     598:	7c 01       	movw	r14, r24
     59a:	e9 01       	movw	r28, r18
	DRESULT res;
	BYTE rc;
	WORD bc;


	if (!(CardType & CT_BLOCK)) lba *= 512;		/* Convert to byte address if needed */
     59c:	80 91 f8 00 	lds	r24, 0x00F8
     5a0:	83 fd       	sbrc	r24, 3
     5a2:	09 c0       	rjmp	.+18     	; 0x5b6 <disk_readp+0x2e>
     5a4:	03 2e       	mov	r0, r19
     5a6:	39 e0       	ldi	r19, 0x09	; 9
     5a8:	44 0f       	add	r20, r20
     5aa:	55 1f       	adc	r21, r21
     5ac:	66 1f       	adc	r22, r22
     5ae:	77 1f       	adc	r23, r23
     5b0:	3a 95       	dec	r19
     5b2:	d1 f7       	brne	.-12     	; 0x5a8 <disk_readp+0x20>
     5b4:	30 2d       	mov	r19, r0

	res = RES_ERROR;
	if (send_cmd(CMD17, lba) == 0) {		/* READ_SINGLE_BLOCK */
     5b6:	81 e5       	ldi	r24, 0x51	; 81
     5b8:	0e 94 78 02 	call	0x4f0	; 0x4f0 <send_cmd>
     5bc:	81 11       	cpse	r24, r1
     5be:	36 c0       	rjmp	.+108    	; 0x62c <disk_readp+0xa4>
     5c0:	0f 2e       	mov	r0, r31
     5c2:	f0 e3       	ldi	r31, 0x30	; 48
     5c4:	cf 2e       	mov	r12, r31
     5c6:	f5 e7       	ldi	r31, 0x75	; 117
     5c8:	df 2e       	mov	r13, r31
     5ca:	f0 2d       	mov	r31, r0

		bc = 30000;
		do {							/* Wait for data packet in timeout of 100ms */
			rc = rcv_spi();
     5cc:	0e 94 6e 02 	call	0x4dc	; 0x4dc <rcv_spi>
		} while (rc == 0xFF && --bc);
     5d0:	8f 3f       	cpi	r24, 0xFF	; 255
     5d2:	39 f4       	brne	.+14     	; 0x5e2 <disk_readp+0x5a>
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	c8 1a       	sub	r12, r24
     5d8:	d1 08       	sbc	r13, r1
     5da:	c1 14       	cp	r12, r1
     5dc:	d1 04       	cpc	r13, r1
     5de:	b1 f7       	brne	.-20     	; 0x5cc <disk_readp+0x44>
     5e0:	27 c0       	rjmp	.+78     	; 0x630 <disk_readp+0xa8>

		if (rc == 0xFE) {				/* A data packet arrived */
     5e2:	8e 3f       	cpi	r24, 0xFE	; 254
     5e4:	39 f5       	brne	.+78     	; 0x634 <disk_readp+0xac>
			bc = 514 - ofs - cnt;
     5e6:	82 e0       	ldi	r24, 0x02	; 2
     5e8:	92 e0       	ldi	r25, 0x02	; 2
     5ea:	6c 01       	movw	r12, r24
     5ec:	c0 1a       	sub	r12, r16
     5ee:	d1 0a       	sbc	r13, r17
     5f0:	cc 1a       	sub	r12, r28
     5f2:	dd 0a       	sbc	r13, r29

			/* Skip leading bytes */
			if (ofs) {
     5f4:	20 97       	sbiw	r28, 0x00	; 0
     5f6:	29 f0       	breq	.+10     	; 0x602 <disk_readp+0x7a>
				do rcv_spi(); while (--ofs);
     5f8:	0e 94 6e 02 	call	0x4dc	; 0x4dc <rcv_spi>
     5fc:	21 97       	sbiw	r28, 0x01	; 1
     5fe:	20 97       	sbiw	r28, 0x00	; 0
     600:	d9 f7       	brne	.-10     	; 0x5f8 <disk_readp+0x70>
			}

			/* Receive a part of the sector */
			if (buff) {	/* Store data to the memory */
     602:	e1 14       	cp	r14, r1
     604:	f1 04       	cpc	r15, r1
     606:	49 f0       	breq	.+18     	; 0x61a <disk_readp+0x92>
     608:	e7 01       	movw	r28, r14
				do
					*buff++ = rcv_spi();
     60a:	0e 94 6e 02 	call	0x4dc	; 0x4dc <rcv_spi>
     60e:	89 93       	st	Y+, r24
				while (--cnt);
     610:	01 50       	subi	r16, 0x01	; 1
     612:	11 09       	sbc	r17, r1
     614:	01 15       	cp	r16, r1
     616:	11 05       	cpc	r17, r1
     618:	c1 f7       	brne	.-16     	; 0x60a <disk_readp+0x82>
			}

			/* Skip trailing bytes and CRC */
			do rcv_spi(); while (--bc);
     61a:	0e 94 6e 02 	call	0x4dc	; 0x4dc <rcv_spi>
     61e:	81 e0       	ldi	r24, 0x01	; 1
     620:	c8 1a       	sub	r12, r24
     622:	d1 08       	sbc	r13, r1
     624:	c1 14       	cp	r12, r1
     626:	d1 04       	cpc	r13, r1
     628:	c1 f7       	brne	.-16     	; 0x61a <disk_readp+0x92>
     62a:	06 c0       	rjmp	.+12     	; 0x638 <disk_readp+0xb0>
	WORD bc;


	if (!(CardType & CT_BLOCK)) lba *= 512;		/* Convert to byte address if needed */

	res = RES_ERROR;
     62c:	c1 e0       	ldi	r28, 0x01	; 1
     62e:	05 c0       	rjmp	.+10     	; 0x63a <disk_readp+0xb2>
     630:	c1 e0       	ldi	r28, 0x01	; 1
     632:	03 c0       	rjmp	.+6      	; 0x63a <disk_readp+0xb2>
     634:	c1 e0       	ldi	r28, 0x01	; 1
     636:	01 c0       	rjmp	.+2      	; 0x63a <disk_readp+0xb2>
			}

			/* Skip trailing bytes and CRC */
			do rcv_spi(); while (--bc);

			res = RES_OK;
     638:	c0 e0       	ldi	r28, 0x00	; 0
		}
	}

	release_spi();
     63a:	0e 94 74 02 	call	0x4e8	; 0x4e8 <release_spi>

	return res;
}
     63e:	8c 2f       	mov	r24, r28
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	1f 91       	pop	r17
     646:	0f 91       	pop	r16
     648:	ff 90       	pop	r15
     64a:	ef 90       	pop	r14
     64c:	df 90       	pop	r13
     64e:	cf 90       	pop	r12
     650:	08 95       	ret

00000652 <disk_writep>:

DRESULT disk_writep (
	const BYTE *buff,	/* Pointer to the bytes to be written (NULL:Initiate/Finalize sector write) */
	DWORD sa			/* Number of bytes to send, Sector number (LBA) or zero */
)
{
     652:	1f 93       	push	r17
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
	static WORD wc;


	res = RES_ERROR;

	if (buff) {		/* Send data bytes */
     658:	00 97       	sbiw	r24, 0x00	; 0
     65a:	31 f1       	breq	.+76     	; 0x6a8 <disk_writep+0x56>
		bc = (WORD)sa;
		while (bc && wc) {		/* Send data bytes to the card */
     65c:	41 15       	cp	r20, r1
     65e:	51 05       	cpc	r21, r1
     660:	09 f4       	brne	.+2      	; 0x664 <disk_writep+0x12>
     662:	6f c0       	rjmp	.+222    	; 0x742 <disk_writep+0xf0>
     664:	20 91 f6 00 	lds	r18, 0x00F6
     668:	30 91 f7 00 	lds	r19, 0x00F7
     66c:	23 2b       	or	r18, r19
     66e:	09 f4       	brne	.+2      	; 0x672 <disk_writep+0x20>
     670:	6a c0       	rjmp	.+212    	; 0x746 <disk_writep+0xf4>
     672:	fc 01       	movw	r30, r24
     674:	41 50       	subi	r20, 0x01	; 1
     676:	51 09       	sbc	r21, r1
     678:	48 0f       	add	r20, r24
     67a:	59 1f       	adc	r21, r25
			xmit_spi(*buff++);
     67c:	80 81       	ld	r24, Z
     67e:	8f b9       	out	0x0f, r24	; 15
     680:	77 9b       	sbis	0x0e, 7	; 14
     682:	fe cf       	rjmp	.-4      	; 0x680 <disk_writep+0x2e>
			wc--; bc--;
     684:	20 91 f6 00 	lds	r18, 0x00F6
     688:	30 91 f7 00 	lds	r19, 0x00F7
     68c:	21 50       	subi	r18, 0x01	; 1
     68e:	31 09       	sbc	r19, r1
     690:	30 93 f7 00 	sts	0x00F7, r19
     694:	20 93 f6 00 	sts	0x00F6, r18

	res = RES_ERROR;

	if (buff) {		/* Send data bytes */
		bc = (WORD)sa;
		while (bc && wc) {		/* Send data bytes to the card */
     698:	e4 17       	cp	r30, r20
     69a:	f5 07       	cpc	r31, r21
     69c:	09 f4       	brne	.+2      	; 0x6a0 <disk_writep+0x4e>
     69e:	55 c0       	rjmp	.+170    	; 0x74a <disk_writep+0xf8>
     6a0:	31 96       	adiw	r30, 0x01	; 1
     6a2:	23 2b       	or	r18, r19
     6a4:	59 f7       	brne	.-42     	; 0x67c <disk_writep+0x2a>
     6a6:	53 c0       	rjmp	.+166    	; 0x74e <disk_writep+0xfc>
			xmit_spi(*buff++);
			wc--; bc--;
		}
		res = RES_OK;
	} else {
		if (sa) {	/* Initiate sector write process */
     6a8:	41 15       	cp	r20, r1
     6aa:	51 05       	cpc	r21, r1
     6ac:	61 05       	cpc	r22, r1
     6ae:	71 05       	cpc	r23, r1
     6b0:	11 f1       	breq	.+68     	; 0x6f6 <disk_writep+0xa4>
			if (!(CardType & CT_BLOCK)) sa *= 512;	/* Convert to byte address if needed */
     6b2:	80 91 f8 00 	lds	r24, 0x00F8
     6b6:	83 fd       	sbrc	r24, 3
     6b8:	09 c0       	rjmp	.+18     	; 0x6cc <disk_writep+0x7a>
     6ba:	03 2e       	mov	r0, r19
     6bc:	39 e0       	ldi	r19, 0x09	; 9
     6be:	44 0f       	add	r20, r20
     6c0:	55 1f       	adc	r21, r21
     6c2:	66 1f       	adc	r22, r22
     6c4:	77 1f       	adc	r23, r23
     6c6:	3a 95       	dec	r19
     6c8:	d1 f7       	brne	.-12     	; 0x6be <disk_writep+0x6c>
     6ca:	30 2d       	mov	r19, r0
			if (send_cmd(CMD24, sa) == 0) {			/* WRITE_SINGLE_BLOCK */
     6cc:	88 e5       	ldi	r24, 0x58	; 88
     6ce:	0e 94 78 02 	call	0x4f0	; 0x4f0 <send_cmd>
     6d2:	81 11       	cpse	r24, r1
     6d4:	3e c0       	rjmp	.+124    	; 0x752 <disk_writep+0x100>
				xmit_spi(0xFF); xmit_spi(0xFE);		/* Data block header */
     6d6:	8f ef       	ldi	r24, 0xFF	; 255
     6d8:	8f b9       	out	0x0f, r24	; 15
     6da:	77 9b       	sbis	0x0e, 7	; 14
     6dc:	fe cf       	rjmp	.-4      	; 0x6da <disk_writep+0x88>
     6de:	8e ef       	ldi	r24, 0xFE	; 254
     6e0:	8f b9       	out	0x0f, r24	; 15
     6e2:	77 9b       	sbis	0x0e, 7	; 14
     6e4:	fe cf       	rjmp	.-4      	; 0x6e2 <disk_writep+0x90>
				wc = 512;							/* Set byte counter */
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	92 e0       	ldi	r25, 0x02	; 2
     6ea:	90 93 f7 00 	sts	0x00F7, r25
     6ee:	80 93 f6 00 	sts	0x00F6, r24
				res = RES_OK;
     6f2:	10 e0       	ldi	r17, 0x00	; 0
     6f4:	2f c0       	rjmp	.+94     	; 0x754 <disk_writep+0x102>
			}
		} else {	/* Finalize sector write process */
			bc = wc + 2;
     6f6:	20 91 f6 00 	lds	r18, 0x00F6
     6fa:	30 91 f7 00 	lds	r19, 0x00F7
			while (bc--) xmit_spi(0);	/* Fill left bytes and CRC with zeros */
     6fe:	c9 01       	movw	r24, r18
     700:	01 96       	adiw	r24, 0x01	; 1
     702:	2e 3f       	cpi	r18, 0xFE	; 254
     704:	3f 4f       	sbci	r19, 0xFF	; 255
     706:	19 f0       	breq	.+6      	; 0x70e <disk_writep+0xbc>
     708:	1f b8       	out	0x0f, r1	; 15
     70a:	01 97       	sbiw	r24, 0x01	; 1
     70c:	e8 f7       	brcc	.-6      	; 0x708 <disk_writep+0xb6>
     70e:	77 9b       	sbis	0x0e, 7	; 14
     710:	fe cf       	rjmp	.-4      	; 0x70e <disk_writep+0xbc>
			if ((rcv_spi() & 0x1F) == 0x05) {	/* Receive data resp and wait for end of write process in timeout of 300ms */
     712:	0e 94 6e 02 	call	0x4dc	; 0x4dc <rcv_spi>
     716:	8f 71       	andi	r24, 0x1F	; 31
     718:	85 30       	cpi	r24, 0x05	; 5
     71a:	79 f4       	brne	.+30     	; 0x73a <disk_writep+0xe8>
     71c:	c8 ee       	ldi	r28, 0xE8	; 232
     71e:	dd ef       	ldi	r29, 0xFD	; 253
     720:	01 c0       	rjmp	.+2      	; 0x724 <disk_writep+0xd2>
				for (bc = 65000; rcv_spi() != 0xFF && bc; bc--) ;	/* Wait ready */
     722:	21 97       	sbiw	r28, 0x01	; 1
     724:	0e 94 6e 02 	call	0x4dc	; 0x4dc <rcv_spi>
     728:	8f 3f       	cpi	r24, 0xFF	; 255
     72a:	11 f0       	breq	.+4      	; 0x730 <disk_writep+0xde>
     72c:	20 97       	sbiw	r28, 0x00	; 0
     72e:	c9 f7       	brne	.-14     	; 0x722 <disk_writep+0xd0>
				if (bc) res = RES_OK;
     730:	11 e0       	ldi	r17, 0x01	; 1
     732:	cd 2b       	or	r28, r29
     734:	19 f0       	breq	.+6      	; 0x73c <disk_writep+0xea>
     736:	10 e0       	ldi	r17, 0x00	; 0
     738:	01 c0       	rjmp	.+2      	; 0x73c <disk_writep+0xea>
	DRESULT res;
	WORD bc;
	static WORD wc;


	res = RES_ERROR;
     73a:	11 e0       	ldi	r17, 0x01	; 1
			while (bc--) xmit_spi(0);	/* Fill left bytes and CRC with zeros */
			if ((rcv_spi() & 0x1F) == 0x05) {	/* Receive data resp and wait for end of write process in timeout of 300ms */
				for (bc = 65000; rcv_spi() != 0xFF && bc; bc--) ;	/* Wait ready */
				if (bc) res = RES_OK;
			}
			release_spi();
     73c:	0e 94 74 02 	call	0x4e8	; 0x4e8 <release_spi>
     740:	09 c0       	rjmp	.+18     	; 0x754 <disk_writep+0x102>
		bc = (WORD)sa;
		while (bc && wc) {		/* Send data bytes to the card */
			xmit_spi(*buff++);
			wc--; bc--;
		}
		res = RES_OK;
     742:	10 e0       	ldi	r17, 0x00	; 0
     744:	07 c0       	rjmp	.+14     	; 0x754 <disk_writep+0x102>
     746:	10 e0       	ldi	r17, 0x00	; 0
     748:	05 c0       	rjmp	.+10     	; 0x754 <disk_writep+0x102>
     74a:	10 e0       	ldi	r17, 0x00	; 0
     74c:	03 c0       	rjmp	.+6      	; 0x754 <disk_writep+0x102>
     74e:	10 e0       	ldi	r17, 0x00	; 0
     750:	01 c0       	rjmp	.+2      	; 0x754 <disk_writep+0x102>
	DRESULT res;
	WORD bc;
	static WORD wc;


	res = RES_ERROR;
     752:	11 e0       	ldi	r17, 0x01	; 1
			release_spi();
		}
	}

	return res;
}
     754:	81 2f       	mov	r24, r17
     756:	df 91       	pop	r29
     758:	cf 91       	pop	r28
     75a:	1f 91       	pop	r17
     75c:	08 95       	ret

0000075e <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (void)
{
     75e:	ef 92       	push	r14
     760:	ff 92       	push	r15
     762:	0f 93       	push	r16
     764:	1f 93       	push	r17
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
     76a:	00 d0       	rcall	.+0      	; 0x76c <disk_initialize+0xe>
     76c:	00 d0       	rcall	.+0      	; 0x76e <disk_initialize+0x10>
     76e:	cd b7       	in	r28, 0x3d	; 61
     770:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];
	WORD tmr;

#if _WRITE_FUNC
	if (MMC_SEL) disk_writep(0, 0);		/* Finalize write process if it is in progress */
     772:	c4 99       	sbic	0x18, 4	; 24
     774:	b6 c0       	rjmp	.+364    	; 0x8e2 <__stack+0x83>
     776:	40 e0       	ldi	r20, 0x00	; 0
     778:	50 e0       	ldi	r21, 0x00	; 0
     77a:	ba 01       	movw	r22, r20
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	0e 94 29 03 	call	0x652	; 0x652 <disk_writep>
     784:	ae c0       	rjmp	.+348    	; 0x8e2 <__stack+0x83>
#endif
	for (n = 100; n; n--) rcv_spi();	/* Dummy clocks */
     786:	0e 94 6e 02 	call	0x4dc	; 0x4dc <rcv_spi>
     78a:	11 50       	subi	r17, 0x01	; 1
     78c:	e1 f7       	brne	.-8      	; 0x786 <disk_initialize+0x28>


	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
     78e:	40 e0       	ldi	r20, 0x00	; 0
     790:	50 e0       	ldi	r21, 0x00	; 0
     792:	ba 01       	movw	r22, r20
     794:	80 e4       	ldi	r24, 0x40	; 64
     796:	0e 94 78 02 	call	0x4f0	; 0x4f0 <send_cmd>
     79a:	81 30       	cpi	r24, 0x01	; 1
     79c:	09 f0       	breq	.+2      	; 0x7a0 <disk_initialize+0x42>
     79e:	83 c0       	rjmp	.+262    	; 0x8a6 <__stack+0x47>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
     7a0:	4a ea       	ldi	r20, 0xAA	; 170
     7a2:	51 e0       	ldi	r21, 0x01	; 1
     7a4:	60 e0       	ldi	r22, 0x00	; 0
     7a6:	70 e0       	ldi	r23, 0x00	; 0
     7a8:	88 e4       	ldi	r24, 0x48	; 72
     7aa:	0e 94 78 02 	call	0x4f0	; 0x4f0 <send_cmd>
     7ae:	81 30       	cpi	r24, 0x01	; 1
     7b0:	09 f0       	breq	.+2      	; 0x7b4 <disk_initialize+0x56>
     7b2:	47 c0       	rjmp	.+142    	; 0x842 <disk_initialize+0xe4>
     7b4:	7e 01       	movw	r14, r28
     7b6:	85 e0       	ldi	r24, 0x05	; 5
     7b8:	e8 0e       	add	r14, r24
     7ba:	f1 1c       	adc	r15, r1
     7bc:	8e 01       	movw	r16, r28
     7be:	0f 5f       	subi	r16, 0xFF	; 255
     7c0:	1f 4f       	sbci	r17, 0xFF	; 255
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
     7c2:	0e 94 6e 02 	call	0x4dc	; 0x4dc <rcv_spi>
     7c6:	f8 01       	movw	r30, r16
     7c8:	81 93       	st	Z+, r24
     7ca:	8f 01       	movw	r16, r30
     7cc:	ee 15       	cp	r30, r14
     7ce:	ff 05       	cpc	r31, r15
     7d0:	c1 f7       	brne	.-16     	; 0x7c2 <disk_initialize+0x64>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
     7d2:	8b 81       	ldd	r24, Y+3	; 0x03
     7d4:	81 30       	cpi	r24, 0x01	; 1
     7d6:	09 f0       	breq	.+2      	; 0x7da <disk_initialize+0x7c>
     7d8:	68 c0       	rjmp	.+208    	; 0x8aa <__stack+0x4b>
     7da:	8c 81       	ldd	r24, Y+4	; 0x04
     7dc:	8a 3a       	cpi	r24, 0xAA	; 170
     7de:	09 f0       	breq	.+2      	; 0x7e2 <disk_initialize+0x84>
     7e0:	66 c0       	rjmp	.+204    	; 0x8ae <__stack+0x4f>
     7e2:	00 ee       	ldi	r16, 0xE0	; 224
     7e4:	1e e2       	ldi	r17, 0x2E	; 46
     7e6:	06 c0       	rjmp	.+12     	; 0x7f4 <disk_initialize+0x96>
				for (tmr = 12000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) ;	/* Wait for leaving idle state (ACMD41 with HCS bit) */
     7e8:	01 50       	subi	r16, 0x01	; 1
     7ea:	11 09       	sbc	r17, r1
     7ec:	01 15       	cp	r16, r1
     7ee:	11 05       	cpc	r17, r1
     7f0:	09 f4       	brne	.+2      	; 0x7f4 <disk_initialize+0x96>
     7f2:	5f c0       	rjmp	.+190    	; 0x8b2 <__stack+0x53>
     7f4:	40 e0       	ldi	r20, 0x00	; 0
     7f6:	50 e0       	ldi	r21, 0x00	; 0
     7f8:	60 e0       	ldi	r22, 0x00	; 0
     7fa:	70 e4       	ldi	r23, 0x40	; 64
     7fc:	89 ee       	ldi	r24, 0xE9	; 233
     7fe:	0e 94 78 02 	call	0x4f0	; 0x4f0 <send_cmd>
     802:	81 11       	cpse	r24, r1
     804:	f1 cf       	rjmp	.-30     	; 0x7e8 <disk_initialize+0x8a>
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
     806:	01 2b       	or	r16, r17
     808:	09 f4       	brne	.+2      	; 0x80c <disk_initialize+0xae>
     80a:	55 c0       	rjmp	.+170    	; 0x8b6 <__stack+0x57>
     80c:	40 e0       	ldi	r20, 0x00	; 0
     80e:	50 e0       	ldi	r21, 0x00	; 0
     810:	ba 01       	movw	r22, r20
     812:	8a e7       	ldi	r24, 0x7A	; 122
     814:	0e 94 78 02 	call	0x4f0	; 0x4f0 <send_cmd>
     818:	81 11       	cpse	r24, r1
     81a:	4f c0       	rjmp	.+158    	; 0x8ba <__stack+0x5b>
     81c:	8e 01       	movw	r16, r28
     81e:	0f 5f       	subi	r16, 0xFF	; 255
     820:	1f 4f       	sbci	r17, 0xFF	; 255
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
     822:	0e 94 6e 02 	call	0x4dc	; 0x4dc <rcv_spi>
     826:	f8 01       	movw	r30, r16
     828:	81 93       	st	Z+, r24
     82a:	8f 01       	movw	r16, r30
     82c:	ee 15       	cp	r30, r14
     82e:	ff 05       	cpc	r31, r15
     830:	c1 f7       	brne	.-16     	; 0x822 <disk_initialize+0xc4>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
     832:	89 81       	ldd	r24, Y+1	; 0x01
     834:	86 ff       	sbrs	r24, 6
     836:	43 c0       	rjmp	.+134    	; 0x8be <__stack+0x5f>
     838:	0f 2e       	mov	r0, r31
     83a:	fc e0       	ldi	r31, 0x0C	; 12
     83c:	ff 2e       	mov	r15, r31
     83e:	f0 2d       	mov	r31, r0
     840:	47 c0       	rjmp	.+142    	; 0x8d0 <__stack+0x71>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
     842:	40 e0       	ldi	r20, 0x00	; 0
     844:	50 e0       	ldi	r21, 0x00	; 0
     846:	ba 01       	movw	r22, r20
     848:	89 ee       	ldi	r24, 0xE9	; 233
     84a:	0e 94 78 02 	call	0x4f0	; 0x4f0 <send_cmd>
     84e:	82 30       	cpi	r24, 0x02	; 2
     850:	40 f4       	brcc	.+16     	; 0x862 <__stack+0x3>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
     852:	68 94       	set
     854:	ff 24       	eor	r15, r15
     856:	f1 f8       	bld	r15, 1
     858:	0f 2e       	mov	r0, r31
     85a:	f9 ee       	ldi	r31, 0xE9	; 233
     85c:	ef 2e       	mov	r14, r31
     85e:	f0 2d       	mov	r31, r0
     860:	06 c0       	rjmp	.+12     	; 0x86e <__stack+0xf>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
     862:	ff 24       	eor	r15, r15
     864:	f3 94       	inc	r15
     866:	0f 2e       	mov	r0, r31
     868:	f1 e4       	ldi	r31, 0x41	; 65
     86a:	ef 2e       	mov	r14, r31
     86c:	f0 2d       	mov	r31, r0
			}
			for (tmr = 25000; tmr && send_cmd(cmd, 0); tmr--) ;	/* Wait for leaving idle state */
     86e:	08 ea       	ldi	r16, 0xA8	; 168
     870:	11 e6       	ldi	r17, 0x61	; 97
     872:	05 c0       	rjmp	.+10     	; 0x87e <__stack+0x1f>
     874:	01 50       	subi	r16, 0x01	; 1
     876:	11 09       	sbc	r17, r1
     878:	01 15       	cp	r16, r1
     87a:	11 05       	cpc	r17, r1
     87c:	21 f1       	breq	.+72     	; 0x8c6 <__stack+0x67>
     87e:	40 e0       	ldi	r20, 0x00	; 0
     880:	50 e0       	ldi	r21, 0x00	; 0
     882:	ba 01       	movw	r22, r20
     884:	8e 2d       	mov	r24, r14
     886:	0e 94 78 02 	call	0x4f0	; 0x4f0 <send_cmd>
     88a:	81 11       	cpse	r24, r1
     88c:	f3 cf       	rjmp	.-26     	; 0x874 <__stack+0x15>
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
     88e:	01 2b       	or	r16, r17
     890:	e1 f0       	breq	.+56     	; 0x8ca <__stack+0x6b>
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	52 e0       	ldi	r21, 0x02	; 2
     896:	60 e0       	ldi	r22, 0x00	; 0
     898:	70 e0       	ldi	r23, 0x00	; 0
     89a:	80 e5       	ldi	r24, 0x50	; 80
     89c:	0e 94 78 02 	call	0x4f0	; 0x4f0 <send_cmd>
     8a0:	81 11       	cpse	r24, r1
     8a2:	15 c0       	rjmp	.+42     	; 0x8ce <__stack+0x6f>
     8a4:	15 c0       	rjmp	.+42     	; 0x8d0 <__stack+0x71>
	if (MMC_SEL) disk_writep(0, 0);		/* Finalize write process if it is in progress */
#endif
	for (n = 100; n; n--) rcv_spi();	/* Dummy clocks */


	ty = 0;
     8a6:	f1 2c       	mov	r15, r1
     8a8:	13 c0       	rjmp	.+38     	; 0x8d0 <__stack+0x71>
     8aa:	f1 2c       	mov	r15, r1
     8ac:	11 c0       	rjmp	.+34     	; 0x8d0 <__stack+0x71>
     8ae:	f1 2c       	mov	r15, r1
     8b0:	0f c0       	rjmp	.+30     	; 0x8d0 <__stack+0x71>
     8b2:	f1 2c       	mov	r15, r1
     8b4:	0d c0       	rjmp	.+26     	; 0x8d0 <__stack+0x71>
     8b6:	f1 2c       	mov	r15, r1
     8b8:	0b c0       	rjmp	.+22     	; 0x8d0 <__stack+0x71>
     8ba:	f1 2c       	mov	r15, r1
     8bc:	09 c0       	rjmp	.+18     	; 0x8d0 <__stack+0x71>
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 12000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) ;	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
     8be:	68 94       	set
     8c0:	ff 24       	eor	r15, r15
     8c2:	f2 f8       	bld	r15, 2
     8c4:	05 c0       	rjmp	.+10     	; 0x8d0 <__stack+0x71>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 25000; tmr && send_cmd(cmd, 0); tmr--) ;	/* Wait for leaving idle state */
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
				ty = 0;
     8c6:	f1 2c       	mov	r15, r1
     8c8:	03 c0       	rjmp	.+6      	; 0x8d0 <__stack+0x71>
     8ca:	f1 2c       	mov	r15, r1
     8cc:	01 c0       	rjmp	.+2      	; 0x8d0 <__stack+0x71>
     8ce:	f1 2c       	mov	r15, r1
		}
	}
	CardType = ty;
     8d0:	f0 92 f8 00 	sts	0x00F8, r15
	release_spi();
     8d4:	0e 94 74 02 	call	0x4e8	; 0x4e8 <release_spi>

	return ty ? 0 : STA_NOINIT;
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	ff 20       	and	r15, r15
     8dc:	21 f0       	breq	.+8      	; 0x8e6 <__stack+0x87>
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	02 c0       	rjmp	.+4      	; 0x8e6 <__stack+0x87>
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (void)
{
     8e2:	14 e6       	ldi	r17, 0x64	; 100
     8e4:	50 cf       	rjmp	.-352    	; 0x786 <disk_initialize+0x28>
	}
	CardType = ty;
	release_spi();

	return ty ? 0 : STA_NOINIT;
}
     8e6:	0f 90       	pop	r0
     8e8:	0f 90       	pop	r0
     8ea:	0f 90       	pop	r0
     8ec:	0f 90       	pop	r0
     8ee:	df 91       	pop	r29
     8f0:	cf 91       	pop	r28
     8f2:	1f 91       	pop	r17
     8f4:	0f 91       	pop	r16
     8f6:	ff 90       	pop	r15
     8f8:	ef 90       	pop	r14
     8fa:	08 95       	ret

000008fc <clust2sect>:

static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
     8fc:	0f 93       	push	r16
     8fe:	1f 93       	push	r17
	FATFS *fs = FatFs;
     900:	e0 91 f9 00 	lds	r30, 0x00F9
     904:	f0 91 fa 00 	lds	r31, 0x00FA


	clst -= 2;
     908:	9b 01       	movw	r18, r22
     90a:	ac 01       	movw	r20, r24
     90c:	22 50       	subi	r18, 0x02	; 2
     90e:	31 09       	sbc	r19, r1
     910:	41 09       	sbc	r20, r1
     912:	51 09       	sbc	r21, r1
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
     914:	80 85       	ldd	r24, Z+8	; 0x08
     916:	91 85       	ldd	r25, Z+9	; 0x09
     918:	a2 85       	ldd	r26, Z+10	; 0x0a
     91a:	b3 85       	ldd	r27, Z+11	; 0x0b
     91c:	02 97       	sbiw	r24, 0x02	; 2
     91e:	a1 09       	sbc	r26, r1
     920:	b1 09       	sbc	r27, r1
     922:	28 17       	cp	r18, r24
     924:	39 07       	cpc	r19, r25
     926:	4a 07       	cpc	r20, r26
     928:	5b 07       	cpc	r21, r27
     92a:	68 f4       	brcc	.+26     	; 0x946 <clust2sect+0x4a>
	return (DWORD)clst * fs->csize + fs->database;
     92c:	a1 81       	ldd	r26, Z+1	; 0x01
     92e:	b0 e0       	ldi	r27, 0x00	; 0
     930:	0e 94 13 0c 	call	0x1826	; 0x1826 <__muluhisi3>
     934:	04 89       	ldd	r16, Z+20	; 0x14
     936:	15 89       	ldd	r17, Z+21	; 0x15
     938:	26 89       	ldd	r18, Z+22	; 0x16
     93a:	37 89       	ldd	r19, Z+23	; 0x17
     93c:	60 0f       	add	r22, r16
     93e:	71 1f       	adc	r23, r17
     940:	82 1f       	adc	r24, r18
     942:	93 1f       	adc	r25, r19
     944:	03 c0       	rjmp	.+6      	; 0x94c <clust2sect+0x50>
{
	FATFS *fs = FatFs;


	clst -= 2;
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
     946:	60 e0       	ldi	r22, 0x00	; 0
     948:	70 e0       	ldi	r23, 0x00	; 0
     94a:	cb 01       	movw	r24, r22
	return (DWORD)clst * fs->csize + fs->database;
}
     94c:	1f 91       	pop	r17
     94e:	0f 91       	pop	r16
     950:	08 95       	ret

00000952 <dir_rewind>:

static
FRESULT dir_rewind (
	DIR *dj			/* Pointer to directory object */
)
{
     952:	0f 93       	push	r16
     954:	1f 93       	push	r17
     956:	cf 93       	push	r28
     958:	df 93       	push	r29
     95a:	ec 01       	movw	r28, r24
	CLUST clst;
	FATFS *fs = FatFs;
     95c:	e0 91 f9 00 	lds	r30, 0x00F9
     960:	f0 91 fa 00 	lds	r31, 0x00FA


	dj->index = 0;
     964:	19 82       	std	Y+1, r1	; 0x01
     966:	18 82       	st	Y, r1
	clst = dj->sclust;
     968:	6c 81       	ldd	r22, Y+4	; 0x04
     96a:	7d 81       	ldd	r23, Y+5	; 0x05
     96c:	8e 81       	ldd	r24, Y+6	; 0x06
     96e:	9f 81       	ldd	r25, Y+7	; 0x07
	if (clst == 1 || clst >= fs->max_clust)	/* Check start cluster range */
     970:	61 30       	cpi	r22, 0x01	; 1
     972:	71 05       	cpc	r23, r1
     974:	81 05       	cpc	r24, r1
     976:	91 05       	cpc	r25, r1
     978:	59 f1       	breq	.+86     	; 0x9d0 <dir_rewind+0x7e>
     97a:	00 85       	ldd	r16, Z+8	; 0x08
     97c:	11 85       	ldd	r17, Z+9	; 0x09
     97e:	22 85       	ldd	r18, Z+10	; 0x0a
     980:	33 85       	ldd	r19, Z+11	; 0x0b
     982:	60 17       	cp	r22, r16
     984:	71 07       	cpc	r23, r17
     986:	82 07       	cpc	r24, r18
     988:	93 07       	cpc	r25, r19
     98a:	20 f5       	brcc	.+72     	; 0x9d4 <dir_rewind+0x82>
		return FR_DISK_ERR;
#if _FS_FAT32
	if (!clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
     98c:	61 15       	cp	r22, r1
     98e:	71 05       	cpc	r23, r1
     990:	81 05       	cpc	r24, r1
     992:	91 05       	cpc	r25, r1
     994:	09 f5       	brne	.+66     	; 0x9d8 <dir_rewind+0x86>
     996:	80 81       	ld	r24, Z
     998:	83 30       	cpi	r24, 0x03	; 3
     99a:	19 f5       	brne	.+70     	; 0x9e2 <dir_rewind+0x90>
		clst = fs->dirbase;
     99c:	60 89       	ldd	r22, Z+16	; 0x10
     99e:	71 89       	ldd	r23, Z+17	; 0x11
     9a0:	82 89       	ldd	r24, Z+18	; 0x12
     9a2:	93 89       	ldd	r25, Z+19	; 0x13
#endif
	dj->clust = clst;						/* Current cluster */
     9a4:	68 87       	std	Y+8, r22	; 0x08
     9a6:	79 87       	std	Y+9, r23	; 0x09
     9a8:	8a 87       	std	Y+10, r24	; 0x0a
     9aa:	9b 87       	std	Y+11, r25	; 0x0b
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
     9ac:	61 15       	cp	r22, r1
     9ae:	71 05       	cpc	r23, r1
     9b0:	81 05       	cpc	r24, r1
     9b2:	91 05       	cpc	r25, r1
     9b4:	19 f0       	breq	.+6      	; 0x9bc <dir_rewind+0x6a>
     9b6:	0e 94 7e 04 	call	0x8fc	; 0x8fc <clust2sect>
     9ba:	04 c0       	rjmp	.+8      	; 0x9c4 <dir_rewind+0x72>
     9bc:	60 89       	ldd	r22, Z+16	; 0x10
     9be:	71 89       	ldd	r23, Z+17	; 0x11
     9c0:	82 89       	ldd	r24, Z+18	; 0x12
     9c2:	93 89       	ldd	r25, Z+19	; 0x13
     9c4:	6c 87       	std	Y+12, r22	; 0x0c
     9c6:	7d 87       	std	Y+13, r23	; 0x0d
     9c8:	8e 87       	std	Y+14, r24	; 0x0e
     9ca:	9f 87       	std	Y+15, r25	; 0x0f

	return FR_OK;	/* Seek succeeded */
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	0e c0       	rjmp	.+28     	; 0x9ec <dir_rewind+0x9a>


	dj->index = 0;
	clst = dj->sclust;
	if (clst == 1 || clst >= fs->max_clust)	/* Check start cluster range */
		return FR_DISK_ERR;
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	0c c0       	rjmp	.+24     	; 0x9ec <dir_rewind+0x9a>
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	0a c0       	rjmp	.+20     	; 0x9ec <dir_rewind+0x9a>
#if _FS_FAT32
	if (!clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = fs->dirbase;
#endif
	dj->clust = clst;						/* Current cluster */
     9d8:	68 87       	std	Y+8, r22	; 0x08
     9da:	79 87       	std	Y+9, r23	; 0x09
     9dc:	8a 87       	std	Y+10, r24	; 0x0a
     9de:	9b 87       	std	Y+11, r25	; 0x0b
     9e0:	ea cf       	rjmp	.-44     	; 0x9b6 <dir_rewind+0x64>
     9e2:	18 86       	std	Y+8, r1	; 0x08
     9e4:	19 86       	std	Y+9, r1	; 0x09
     9e6:	1a 86       	std	Y+10, r1	; 0x0a
     9e8:	1b 86       	std	Y+11, r1	; 0x0b
     9ea:	e8 cf       	rjmp	.-48     	; 0x9bc <dir_rewind+0x6a>
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */

	return FR_OK;	/* Seek succeeded */
}
     9ec:	df 91       	pop	r29
     9ee:	cf 91       	pop	r28
     9f0:	1f 91       	pop	r17
     9f2:	0f 91       	pop	r16
     9f4:	08 95       	ret

000009f6 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
     9f6:	cf 92       	push	r12
     9f8:	df 92       	push	r13
     9fa:	ef 92       	push	r14
     9fc:	ff 92       	push	r15
     9fe:	0f 93       	push	r16
     a00:	1f 93       	push	r17
     a02:	cf 93       	push	r28
     a04:	df 93       	push	r29
     a06:	ec 01       	movw	r28, r24
     a08:	6a 01       	movw	r12, r20
     a0a:	7b 01       	movw	r14, r22
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot sector */
     a0c:	02 e0       	ldi	r16, 0x02	; 2
     a0e:	10 e0       	ldi	r17, 0x00	; 0
     a10:	2e ef       	ldi	r18, 0xFE	; 254
     a12:	31 e0       	ldi	r19, 0x01	; 1
     a14:	0e 94 c4 02 	call	0x588	; 0x588 <disk_readp>
     a18:	81 11       	cpse	r24, r1
     a1a:	26 c0       	rjmp	.+76     	; 0xa68 <check_fs+0x72>
		return 3;
	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
     a1c:	88 81       	ld	r24, Y
     a1e:	99 81       	ldd	r25, Y+1	; 0x01
     a20:	85 35       	cpi	r24, 0x55	; 85
     a22:	9a 4a       	sbci	r25, 0xAA	; 170
     a24:	19 f5       	brne	.+70     	; 0xa6c <check_fs+0x76>
		return 2;

	if (!disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
     a26:	26 e3       	ldi	r18, 0x36	; 54
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	b7 01       	movw	r22, r14
     a2c:	a6 01       	movw	r20, r12
     a2e:	ce 01       	movw	r24, r28
     a30:	0e 94 c4 02 	call	0x588	; 0x588 <disk_readp>
     a34:	81 11       	cpse	r24, r1
     a36:	05 c0       	rjmp	.+10     	; 0xa42 <check_fs+0x4c>
     a38:	88 81       	ld	r24, Y
     a3a:	99 81       	ldd	r25, Y+1	; 0x01
     a3c:	86 34       	cpi	r24, 0x46	; 70
     a3e:	91 44       	sbci	r25, 0x41	; 65
     a40:	b9 f0       	breq	.+46     	; 0xa70 <check_fs+0x7a>
		return 0;
#if _FS_FAT32
	if (!disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
     a42:	02 e0       	ldi	r16, 0x02	; 2
     a44:	10 e0       	ldi	r17, 0x00	; 0
     a46:	22 e5       	ldi	r18, 0x52	; 82
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	b7 01       	movw	r22, r14
     a4c:	a6 01       	movw	r20, r12
     a4e:	ce 01       	movw	r24, r28
     a50:	0e 94 c4 02 	call	0x588	; 0x588 <disk_readp>
     a54:	81 11       	cpse	r24, r1
     a56:	0e c0       	rjmp	.+28     	; 0xa74 <check_fs+0x7e>
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	28 81       	ld	r18, Y
     a5c:	39 81       	ldd	r19, Y+1	; 0x01
     a5e:	26 34       	cpi	r18, 0x46	; 70
     a60:	31 44       	sbci	r19, 0x41	; 65
     a62:	49 f4       	brne	.+18     	; 0xa76 <check_fs+0x80>
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	07 c0       	rjmp	.+14     	; 0xa76 <check_fs+0x80>
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot sector */
		return 3;
     a68:	83 e0       	ldi	r24, 0x03	; 3
     a6a:	05 c0       	rjmp	.+10     	; 0xa76 <check_fs+0x80>
	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
		return 2;
     a6c:	82 e0       	ldi	r24, 0x02	; 2
     a6e:	03 c0       	rjmp	.+6      	; 0xa76 <check_fs+0x80>

	if (!disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
		return 0;
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	01 c0       	rjmp	.+2      	; 0xa76 <check_fs+0x80>
#if _FS_FAT32
	if (!disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
		return 0;
#endif
	return 1;
     a74:	81 e0       	ldi	r24, 0x01	; 1
}
     a76:	df 91       	pop	r29
     a78:	cf 91       	pop	r28
     a7a:	1f 91       	pop	r17
     a7c:	0f 91       	pop	r16
     a7e:	ff 90       	pop	r15
     a80:	ef 90       	pop	r14
     a82:	df 90       	pop	r13
     a84:	cf 90       	pop	r12
     a86:	08 95       	ret

00000a88 <get_fat>:

static
CLUST get_fat (	/* 1:IO error, Else:Cluster status */
	CLUST clst	/* Cluster# to get the link information */
)
{
     a88:	4f 92       	push	r4
     a8a:	5f 92       	push	r5
     a8c:	6f 92       	push	r6
     a8e:	7f 92       	push	r7
     a90:	af 92       	push	r10
     a92:	bf 92       	push	r11
     a94:	cf 92       	push	r12
     a96:	df 92       	push	r13
     a98:	ef 92       	push	r14
     a9a:	ff 92       	push	r15
     a9c:	0f 93       	push	r16
     a9e:	1f 93       	push	r17
     aa0:	cf 93       	push	r28
     aa2:	df 93       	push	r29
     aa4:	00 d0       	rcall	.+0      	; 0xaa6 <get_fat+0x1e>
     aa6:	00 d0       	rcall	.+0      	; 0xaa8 <get_fat+0x20>
     aa8:	cd b7       	in	r28, 0x3d	; 61
     aaa:	de b7       	in	r29, 0x3e	; 62
     aac:	6b 01       	movw	r12, r22
     aae:	7c 01       	movw	r14, r24
	WORD wc, bc, ofs;
	BYTE buf[4];
	FATFS *fs = FatFs;
     ab0:	a0 90 f9 00 	lds	r10, 0x00F9
     ab4:	b0 90 fa 00 	lds	r11, 0x00FA


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
     ab8:	82 e0       	ldi	r24, 0x02	; 2
     aba:	c8 16       	cp	r12, r24
     abc:	d1 04       	cpc	r13, r1
     abe:	e1 04       	cpc	r14, r1
     ac0:	f1 04       	cpc	r15, r1
     ac2:	08 f4       	brcc	.+2      	; 0xac6 <get_fat+0x3e>
     ac4:	b8 c0       	rjmp	.+368    	; 0xc36 <get_fat+0x1ae>
     ac6:	f5 01       	movw	r30, r10
     ac8:	80 85       	ldd	r24, Z+8	; 0x08
     aca:	91 85       	ldd	r25, Z+9	; 0x09
     acc:	a2 85       	ldd	r26, Z+10	; 0x0a
     ace:	b3 85       	ldd	r27, Z+11	; 0x0b
     ad0:	c8 16       	cp	r12, r24
     ad2:	d9 06       	cpc	r13, r25
     ad4:	ea 06       	cpc	r14, r26
     ad6:	fb 06       	cpc	r15, r27
     ad8:	08 f0       	brcs	.+2      	; 0xadc <get_fat+0x54>
     ada:	b2 c0       	rjmp	.+356    	; 0xc40 <get_fat+0x1b8>
		return 1;

	switch (fs->fs_type) {
     adc:	80 81       	ld	r24, Z
     ade:	82 30       	cpi	r24, 0x02	; 2
     ae0:	09 f4       	brne	.+2      	; 0xae4 <get_fat+0x5c>
     ae2:	61 c0       	rjmp	.+194    	; 0xba6 <get_fat+0x11e>
     ae4:	83 30       	cpi	r24, 0x03	; 3
     ae6:	09 f4       	brne	.+2      	; 0xaea <get_fat+0x62>
     ae8:	7c c0       	rjmp	.+248    	; 0xbe2 <get_fat+0x15a>
     aea:	81 30       	cpi	r24, 0x01	; 1
     aec:	09 f0       	breq	.+2      	; 0xaf0 <get_fat+0x68>
     aee:	ad c0       	rjmp	.+346    	; 0xc4a <get_fat+0x1c2>
	case FS_FAT12 :
		bc = (WORD)clst; bc += bc / 2;
     af0:	26 01       	movw	r4, r12
     af2:	56 94       	lsr	r5
     af4:	47 94       	ror	r4
     af6:	4c 0c       	add	r4, r12
     af8:	5d 1c       	adc	r5, r13
		ofs = bc % 512; bc /= 512;
     afa:	92 01       	movw	r18, r4
     afc:	31 70       	andi	r19, 0x01	; 1
     afe:	45 2c       	mov	r4, r5
     b00:	55 24       	eor	r5, r5
     b02:	46 94       	lsr	r4
		if (ofs != 511) {
     b04:	2f 3f       	cpi	r18, 0xFF	; 255
     b06:	f1 e0       	ldi	r31, 0x01	; 1
     b08:	3f 07       	cpc	r19, r31
     b0a:	91 f0       	breq	.+36     	; 0xb30 <get_fat+0xa8>
			if (disk_readp(buf, fs->fatbase + bc, ofs, 2)) break;
     b0c:	f5 01       	movw	r30, r10
     b0e:	44 85       	ldd	r20, Z+12	; 0x0c
     b10:	55 85       	ldd	r21, Z+13	; 0x0d
     b12:	66 85       	ldd	r22, Z+14	; 0x0e
     b14:	77 85       	ldd	r23, Z+15	; 0x0f
     b16:	44 0d       	add	r20, r4
     b18:	55 1d       	adc	r21, r5
     b1a:	61 1d       	adc	r22, r1
     b1c:	71 1d       	adc	r23, r1
     b1e:	02 e0       	ldi	r16, 0x02	; 2
     b20:	10 e0       	ldi	r17, 0x00	; 0
     b22:	ce 01       	movw	r24, r28
     b24:	01 96       	adiw	r24, 0x01	; 1
     b26:	0e 94 c4 02 	call	0x588	; 0x588 <disk_readp>
     b2a:	88 23       	and	r24, r24
     b2c:	59 f1       	breq	.+86     	; 0xb84 <get_fat+0xfc>
     b2e:	92 c0       	rjmp	.+292    	; 0xc54 <get_fat+0x1cc>
		} else {
			if (disk_readp(buf, fs->fatbase + bc, 511, 1)) break;
     b30:	61 2c       	mov	r6, r1
     b32:	71 2c       	mov	r7, r1
     b34:	f5 01       	movw	r30, r10
     b36:	44 85       	ldd	r20, Z+12	; 0x0c
     b38:	55 85       	ldd	r21, Z+13	; 0x0d
     b3a:	66 85       	ldd	r22, Z+14	; 0x0e
     b3c:	77 85       	ldd	r23, Z+15	; 0x0f
     b3e:	44 0d       	add	r20, r4
     b40:	55 1d       	adc	r21, r5
     b42:	66 1d       	adc	r22, r6
     b44:	77 1d       	adc	r23, r7
     b46:	01 e0       	ldi	r16, 0x01	; 1
     b48:	10 e0       	ldi	r17, 0x00	; 0
     b4a:	2f ef       	ldi	r18, 0xFF	; 255
     b4c:	31 e0       	ldi	r19, 0x01	; 1
     b4e:	ce 01       	movw	r24, r28
     b50:	01 96       	adiw	r24, 0x01	; 1
     b52:	0e 94 c4 02 	call	0x588	; 0x588 <disk_readp>
     b56:	81 11       	cpse	r24, r1
     b58:	82 c0       	rjmp	.+260    	; 0xc5e <get_fat+0x1d6>
			if (disk_readp(buf+1, fs->fatbase + bc + 1, 0, 1)) break;
     b5a:	f5 01       	movw	r30, r10
     b5c:	44 85       	ldd	r20, Z+12	; 0x0c
     b5e:	55 85       	ldd	r21, Z+13	; 0x0d
     b60:	66 85       	ldd	r22, Z+14	; 0x0e
     b62:	77 85       	ldd	r23, Z+15	; 0x0f
     b64:	4f 5f       	subi	r20, 0xFF	; 255
     b66:	5f 4f       	sbci	r21, 0xFF	; 255
     b68:	6f 4f       	sbci	r22, 0xFF	; 255
     b6a:	7f 4f       	sbci	r23, 0xFF	; 255
     b6c:	44 0d       	add	r20, r4
     b6e:	55 1d       	adc	r21, r5
     b70:	66 1d       	adc	r22, r6
     b72:	77 1d       	adc	r23, r7
     b74:	20 e0       	ldi	r18, 0x00	; 0
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	ce 01       	movw	r24, r28
     b7a:	02 96       	adiw	r24, 0x02	; 2
     b7c:	0e 94 c4 02 	call	0x588	; 0x588 <disk_readp>
     b80:	81 11       	cpse	r24, r1
     b82:	72 c0       	rjmp	.+228    	; 0xc68 <get_fat+0x1e0>
		}
		wc = LD_WORD(buf);
     b84:	69 81       	ldd	r22, Y+1	; 0x01
     b86:	7a 81       	ldd	r23, Y+2	; 0x02
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
     b88:	c0 fe       	sbrs	r12, 0
     b8a:	09 c0       	rjmp	.+18     	; 0xb9e <get_fat+0x116>
     b8c:	72 95       	swap	r23
     b8e:	62 95       	swap	r22
     b90:	6f 70       	andi	r22, 0x0F	; 15
     b92:	67 27       	eor	r22, r23
     b94:	7f 70       	andi	r23, 0x0F	; 15
     b96:	67 27       	eor	r22, r23
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	73 c0       	rjmp	.+230    	; 0xc84 <get_fat+0x1fc>
     b9e:	7f 70       	andi	r23, 0x0F	; 15
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	6f c0       	rjmp	.+222    	; 0xc84 <get_fat+0x1fc>

	case FS_FAT16 :
		if (disk_readp(buf, fs->fatbase + clst / 256, (WORD)(((WORD)clst % 256) * 2), 2)) break;
     ba6:	96 01       	movw	r18, r12
     ba8:	33 27       	eor	r19, r19
     baa:	22 0f       	add	r18, r18
     bac:	33 1f       	adc	r19, r19
     bae:	77 27       	eor	r23, r23
     bb0:	6f 2d       	mov	r22, r15
     bb2:	5e 2d       	mov	r21, r14
     bb4:	4d 2d       	mov	r20, r13
     bb6:	f5 01       	movw	r30, r10
     bb8:	84 85       	ldd	r24, Z+12	; 0x0c
     bba:	95 85       	ldd	r25, Z+13	; 0x0d
     bbc:	a6 85       	ldd	r26, Z+14	; 0x0e
     bbe:	b7 85       	ldd	r27, Z+15	; 0x0f
     bc0:	48 0f       	add	r20, r24
     bc2:	59 1f       	adc	r21, r25
     bc4:	6a 1f       	adc	r22, r26
     bc6:	7b 1f       	adc	r23, r27
     bc8:	02 e0       	ldi	r16, 0x02	; 2
     bca:	10 e0       	ldi	r17, 0x00	; 0
     bcc:	ce 01       	movw	r24, r28
     bce:	01 96       	adiw	r24, 0x01	; 1
     bd0:	0e 94 c4 02 	call	0x588	; 0x588 <disk_readp>
     bd4:	81 11       	cpse	r24, r1
     bd6:	4d c0       	rjmp	.+154    	; 0xc72 <get_fat+0x1ea>
		return LD_WORD(buf);
     bd8:	69 81       	ldd	r22, Y+1	; 0x01
     bda:	7a 81       	ldd	r23, Y+2	; 0x02
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	51 c0       	rjmp	.+162    	; 0xc84 <get_fat+0x1fc>
#if _FS_FAT32
	case FS_FAT32 :
		if (disk_readp(buf, fs->fatbase + clst / 128, (WORD)(((WORD)clst % 128) * 4), 4)) break;
     be2:	96 01       	movw	r18, r12
     be4:	2f 77       	andi	r18, 0x7F	; 127
     be6:	33 27       	eor	r19, r19
     be8:	22 0f       	add	r18, r18
     bea:	33 1f       	adc	r19, r19
     bec:	22 0f       	add	r18, r18
     bee:	33 1f       	adc	r19, r19
     bf0:	b7 01       	movw	r22, r14
     bf2:	a6 01       	movw	r20, r12
     bf4:	68 94       	set
     bf6:	16 f8       	bld	r1, 6
     bf8:	76 95       	lsr	r23
     bfa:	67 95       	ror	r22
     bfc:	57 95       	ror	r21
     bfe:	47 95       	ror	r20
     c00:	16 94       	lsr	r1
     c02:	d1 f7       	brne	.-12     	; 0xbf8 <get_fat+0x170>
     c04:	f5 01       	movw	r30, r10
     c06:	84 85       	ldd	r24, Z+12	; 0x0c
     c08:	95 85       	ldd	r25, Z+13	; 0x0d
     c0a:	a6 85       	ldd	r26, Z+14	; 0x0e
     c0c:	b7 85       	ldd	r27, Z+15	; 0x0f
     c0e:	48 0f       	add	r20, r24
     c10:	59 1f       	adc	r21, r25
     c12:	6a 1f       	adc	r22, r26
     c14:	7b 1f       	adc	r23, r27
     c16:	04 e0       	ldi	r16, 0x04	; 4
     c18:	10 e0       	ldi	r17, 0x00	; 0
     c1a:	ce 01       	movw	r24, r28
     c1c:	01 96       	adiw	r24, 0x01	; 1
     c1e:	0e 94 c4 02 	call	0x588	; 0x588 <disk_readp>
     c22:	81 11       	cpse	r24, r1
     c24:	2b c0       	rjmp	.+86     	; 0xc7c <get_fat+0x1f4>
		return LD_DWORD(buf) & 0x0FFFFFFF;
     c26:	89 81       	ldd	r24, Y+1	; 0x01
     c28:	9a 81       	ldd	r25, Y+2	; 0x02
     c2a:	ab 81       	ldd	r26, Y+3	; 0x03
     c2c:	bc 81       	ldd	r27, Y+4	; 0x04
     c2e:	bc 01       	movw	r22, r24
     c30:	cd 01       	movw	r24, r26
     c32:	9f 70       	andi	r25, 0x0F	; 15
     c34:	27 c0       	rjmp	.+78     	; 0xc84 <get_fat+0x1fc>
	BYTE buf[4];
	FATFS *fs = FatFs;


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
		return 1;
     c36:	61 e0       	ldi	r22, 0x01	; 1
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	22 c0       	rjmp	.+68     	; 0xc84 <get_fat+0x1fc>
     c40:	61 e0       	ldi	r22, 0x01	; 1
     c42:	70 e0       	ldi	r23, 0x00	; 0
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	1d c0       	rjmp	.+58     	; 0xc84 <get_fat+0x1fc>
		if (disk_readp(buf, fs->fatbase + clst / 128, (WORD)(((WORD)clst % 128) * 4), 4)) break;
		return LD_DWORD(buf) & 0x0FFFFFFF;
#endif
	}

	return 1;	/* An error occured at the disk I/O layer */
     c4a:	61 e0       	ldi	r22, 0x01	; 1
     c4c:	70 e0       	ldi	r23, 0x00	; 0
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	18 c0       	rjmp	.+48     	; 0xc84 <get_fat+0x1fc>
     c54:	61 e0       	ldi	r22, 0x01	; 1
     c56:	70 e0       	ldi	r23, 0x00	; 0
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	13 c0       	rjmp	.+38     	; 0xc84 <get_fat+0x1fc>
     c5e:	61 e0       	ldi	r22, 0x01	; 1
     c60:	70 e0       	ldi	r23, 0x00	; 0
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	0e c0       	rjmp	.+28     	; 0xc84 <get_fat+0x1fc>
     c68:	61 e0       	ldi	r22, 0x01	; 1
     c6a:	70 e0       	ldi	r23, 0x00	; 0
     c6c:	80 e0       	ldi	r24, 0x00	; 0
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	09 c0       	rjmp	.+18     	; 0xc84 <get_fat+0x1fc>
     c72:	61 e0       	ldi	r22, 0x01	; 1
     c74:	70 e0       	ldi	r23, 0x00	; 0
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <get_fat+0x1fc>
     c7c:	61 e0       	ldi	r22, 0x01	; 1
     c7e:	70 e0       	ldi	r23, 0x00	; 0
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	90 e0       	ldi	r25, 0x00	; 0
}
     c84:	0f 90       	pop	r0
     c86:	0f 90       	pop	r0
     c88:	0f 90       	pop	r0
     c8a:	0f 90       	pop	r0
     c8c:	df 91       	pop	r29
     c8e:	cf 91       	pop	r28
     c90:	1f 91       	pop	r17
     c92:	0f 91       	pop	r16
     c94:	ff 90       	pop	r15
     c96:	ef 90       	pop	r14
     c98:	df 90       	pop	r13
     c9a:	cf 90       	pop	r12
     c9c:	bf 90       	pop	r11
     c9e:	af 90       	pop	r10
     ca0:	7f 90       	pop	r7
     ca2:	6f 90       	pop	r6
     ca4:	5f 90       	pop	r5
     ca6:	4f 90       	pop	r4
     ca8:	08 95       	ret

00000caa <dir_next>:

static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table */
	DIR *dj			/* Pointer to directory object */
)
{
     caa:	cf 92       	push	r12
     cac:	df 92       	push	r13
     cae:	ef 92       	push	r14
     cb0:	ff 92       	push	r15
     cb2:	0f 93       	push	r16
     cb4:	1f 93       	push	r17
     cb6:	cf 93       	push	r28
     cb8:	df 93       	push	r29
     cba:	ec 01       	movw	r28, r24
	CLUST clst;
	WORD i;
	FATFS *fs = FatFs;
     cbc:	e0 90 f9 00 	lds	r14, 0x00F9
     cc0:	f0 90 fa 00 	lds	r15, 0x00FA


	i = dj->index + 1;
     cc4:	08 81       	ld	r16, Y
     cc6:	19 81       	ldd	r17, Y+1	; 0x01
     cc8:	0f 5f       	subi	r16, 0xFF	; 255
     cca:	1f 4f       	sbci	r17, 0xFF	; 255
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
     ccc:	01 15       	cp	r16, r1
     cce:	11 05       	cpc	r17, r1
     cd0:	09 f4       	brne	.+2      	; 0xcd4 <dir_next+0x2a>
     cd2:	57 c0       	rjmp	.+174    	; 0xd82 <dir_next+0xd8>
     cd4:	4c 85       	ldd	r20, Y+12	; 0x0c
     cd6:	5d 85       	ldd	r21, Y+13	; 0x0d
     cd8:	6e 85       	ldd	r22, Y+14	; 0x0e
     cda:	7f 85       	ldd	r23, Y+15	; 0x0f
     cdc:	41 15       	cp	r20, r1
     cde:	51 05       	cpc	r21, r1
     ce0:	61 05       	cpc	r22, r1
     ce2:	71 05       	cpc	r23, r1
     ce4:	09 f4       	brne	.+2      	; 0xce8 <dir_next+0x3e>
     ce6:	4f c0       	rjmp	.+158    	; 0xd86 <dir_next+0xdc>
		return FR_NO_FILE;

	if (!(i & (16-1))) {	/* Sector changed? */
     ce8:	c8 01       	movw	r24, r16
     cea:	8f 70       	andi	r24, 0x0F	; 15
     cec:	99 27       	eor	r25, r25
     cee:	89 2b       	or	r24, r25
     cf0:	09 f0       	breq	.+2      	; 0xcf4 <dir_next+0x4a>
     cf2:	43 c0       	rjmp	.+134    	; 0xd7a <dir_next+0xd0>
		dj->sect++;			/* Next sector */
     cf4:	4f 5f       	subi	r20, 0xFF	; 255
     cf6:	5f 4f       	sbci	r21, 0xFF	; 255
     cf8:	6f 4f       	sbci	r22, 0xFF	; 255
     cfa:	7f 4f       	sbci	r23, 0xFF	; 255
     cfc:	4c 87       	std	Y+12, r20	; 0x0c
     cfe:	5d 87       	std	Y+13, r21	; 0x0d
     d00:	6e 87       	std	Y+14, r22	; 0x0e
     d02:	7f 87       	std	Y+15, r23	; 0x0f

		if (dj->clust == 0) {	/* Static table */
     d04:	68 85       	ldd	r22, Y+8	; 0x08
     d06:	79 85       	ldd	r23, Y+9	; 0x09
     d08:	8a 85       	ldd	r24, Y+10	; 0x0a
     d0a:	9b 85       	ldd	r25, Y+11	; 0x0b
     d0c:	61 15       	cp	r22, r1
     d0e:	71 05       	cpc	r23, r1
     d10:	81 05       	cpc	r24, r1
     d12:	91 05       	cpc	r25, r1
     d14:	39 f4       	brne	.+14     	; 0xd24 <dir_next+0x7a>
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
     d16:	f7 01       	movw	r30, r14
     d18:	84 81       	ldd	r24, Z+4	; 0x04
     d1a:	95 81       	ldd	r25, Z+5	; 0x05
     d1c:	08 17       	cp	r16, r24
     d1e:	19 07       	cpc	r17, r25
     d20:	a0 f5       	brcc	.+104    	; 0xd8a <dir_next+0xe0>
     d22:	2b c0       	rjmp	.+86     	; 0xd7a <dir_next+0xd0>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / 16) & (fs->csize-1)) == 0) {	/* Cluster changed? */
     d24:	f7 01       	movw	r30, r14
     d26:	21 81       	ldd	r18, Z+1	; 0x01
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	21 50       	subi	r18, 0x01	; 1
     d2c:	31 09       	sbc	r19, r1
     d2e:	a8 01       	movw	r20, r16
     d30:	52 95       	swap	r21
     d32:	42 95       	swap	r20
     d34:	4f 70       	andi	r20, 0x0F	; 15
     d36:	45 27       	eor	r20, r21
     d38:	5f 70       	andi	r21, 0x0F	; 15
     d3a:	45 27       	eor	r20, r21
     d3c:	24 23       	and	r18, r20
     d3e:	35 23       	and	r19, r21
     d40:	23 2b       	or	r18, r19
     d42:	d9 f4       	brne	.+54     	; 0xd7a <dir_next+0xd0>
				clst = get_fat(dj->clust);		/* Get next cluster */
     d44:	0e 94 44 05 	call	0xa88	; 0xa88 <get_fat>
				if (clst <= 1) return FR_DISK_ERR;
     d48:	62 30       	cpi	r22, 0x02	; 2
     d4a:	71 05       	cpc	r23, r1
     d4c:	81 05       	cpc	r24, r1
     d4e:	91 05       	cpc	r25, r1
     d50:	f0 f0       	brcs	.+60     	; 0xd8e <dir_next+0xe4>
				if (clst >= fs->max_clust)		/* When it reached end of dynamic table */
     d52:	f7 01       	movw	r30, r14
     d54:	c0 84       	ldd	r12, Z+8	; 0x08
     d56:	d1 84       	ldd	r13, Z+9	; 0x09
     d58:	e2 84       	ldd	r14, Z+10	; 0x0a
     d5a:	f3 84       	ldd	r15, Z+11	; 0x0b
     d5c:	6c 15       	cp	r22, r12
     d5e:	7d 05       	cpc	r23, r13
     d60:	8e 05       	cpc	r24, r14
     d62:	9f 05       	cpc	r25, r15
     d64:	b0 f4       	brcc	.+44     	; 0xd92 <dir_next+0xe8>
					return FR_NO_FILE;			/* Report EOT */
				dj->clust = clst;				/* Initialize data for new cluster */
     d66:	68 87       	std	Y+8, r22	; 0x08
     d68:	79 87       	std	Y+9, r23	; 0x09
     d6a:	8a 87       	std	Y+10, r24	; 0x0a
     d6c:	9b 87       	std	Y+11, r25	; 0x0b
				dj->sect = clust2sect(clst);
     d6e:	0e 94 7e 04 	call	0x8fc	; 0x8fc <clust2sect>
     d72:	6c 87       	std	Y+12, r22	; 0x0c
     d74:	7d 87       	std	Y+13, r23	; 0x0d
     d76:	8e 87       	std	Y+14, r24	; 0x0e
     d78:	9f 87       	std	Y+15, r25	; 0x0f
			}
		}
	}

	dj->index = i;
     d7a:	19 83       	std	Y+1, r17	; 0x01
     d7c:	08 83       	st	Y, r16

	return FR_OK;
     d7e:	80 e0       	ldi	r24, 0x00	; 0
     d80:	09 c0       	rjmp	.+18     	; 0xd94 <dir_next+0xea>
	FATFS *fs = FatFs;


	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
		return FR_NO_FILE;
     d82:	83 e0       	ldi	r24, 0x03	; 3
     d84:	07 c0       	rjmp	.+14     	; 0xd94 <dir_next+0xea>
     d86:	83 e0       	ldi	r24, 0x03	; 3
     d88:	05 c0       	rjmp	.+10     	; 0xd94 <dir_next+0xea>
	if (!(i & (16-1))) {	/* Sector changed? */
		dj->sect++;			/* Next sector */

		if (dj->clust == 0) {	/* Static table */
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
				return FR_NO_FILE;
     d8a:	83 e0       	ldi	r24, 0x03	; 3
     d8c:	03 c0       	rjmp	.+6      	; 0xd94 <dir_next+0xea>
		}
		else {					/* Dynamic table */
			if (((i / 16) & (fs->csize-1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dj->clust);		/* Get next cluster */
				if (clst <= 1) return FR_DISK_ERR;
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	01 c0       	rjmp	.+2      	; 0xd94 <dir_next+0xea>
				if (clst >= fs->max_clust)		/* When it reached end of dynamic table */
					return FR_NO_FILE;			/* Report EOT */
     d92:	83 e0       	ldi	r24, 0x03	; 3
	}

	dj->index = i;

	return FR_OK;
}
     d94:	df 91       	pop	r29
     d96:	cf 91       	pop	r28
     d98:	1f 91       	pop	r17
     d9a:	0f 91       	pop	r16
     d9c:	ff 90       	pop	r15
     d9e:	ef 90       	pop	r14
     da0:	df 90       	pop	r13
     da2:	cf 90       	pop	r12
     da4:	08 95       	ret

00000da6 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const char *path	/* Full-path string to find a file or directory */
)
{
     da6:	2f 92       	push	r2
     da8:	3f 92       	push	r3
     daa:	4f 92       	push	r4
     dac:	5f 92       	push	r5
     dae:	6f 92       	push	r6
     db0:	7f 92       	push	r7
     db2:	8f 92       	push	r8
     db4:	9f 92       	push	r9
     db6:	af 92       	push	r10
     db8:	bf 92       	push	r11
     dba:	cf 92       	push	r12
     dbc:	df 92       	push	r13
     dbe:	ef 92       	push	r14
     dc0:	ff 92       	push	r15
     dc2:	0f 93       	push	r16
     dc4:	1f 93       	push	r17
     dc6:	cf 93       	push	r28
     dc8:	df 93       	push	r29
     dca:	7c 01       	movw	r14, r24
     dcc:	5b 01       	movw	r10, r22
	FRESULT res;
	BYTE *dir;


	while (*path == ' ') path++;		/* Skip leading spaces */
     dce:	db 01       	movw	r26, r22
     dd0:	8c 91       	ld	r24, X
     dd2:	80 32       	cpi	r24, 0x20	; 32
     dd4:	41 f4       	brne	.+16     	; 0xde6 <follow_path+0x40>
     dd6:	fb 01       	movw	r30, r22
     dd8:	31 96       	adiw	r30, 0x01	; 1
     dda:	bf ef       	ldi	r27, 0xFF	; 255
     ddc:	ab 1a       	sub	r10, r27
     dde:	bb 0a       	sbc	r11, r27
     de0:	81 91       	ld	r24, Z+
     de2:	80 32       	cpi	r24, 0x20	; 32
     de4:	d1 f3       	breq	.-12     	; 0xdda <follow_path+0x34>
	if (*path == '/') path++;			/* Strip heading separator */
     de6:	8f 32       	cpi	r24, 0x2F	; 47
     de8:	19 f4       	brne	.+6      	; 0xdf0 <follow_path+0x4a>
     dea:	ef ef       	ldi	r30, 0xFF	; 255
     dec:	ae 1a       	sub	r10, r30
     dee:	be 0a       	sbc	r11, r30
	dj->sclust = 0;						/* Set start directory (always root dir) */
     df0:	d7 01       	movw	r26, r14
     df2:	14 96       	adiw	r26, 0x04	; 4
     df4:	1d 92       	st	X+, r1
     df6:	1d 92       	st	X+, r1
     df8:	1d 92       	st	X+, r1
     dfa:	1c 92       	st	X, r1
     dfc:	17 97       	sbiw	r26, 0x07	; 7

	if ((BYTE)*path <= ' ') {			/* Null path means the root directory */
     dfe:	f5 01       	movw	r30, r10
     e00:	80 81       	ld	r24, Z
     e02:	81 32       	cpi	r24, 0x21	; 33
     e04:	68 f4       	brcc	.+26     	; 0xe20 <follow_path+0x7a>
		res = dir_rewind(dj);
     e06:	c7 01       	movw	r24, r14
     e08:	0e 94 a9 04 	call	0x952	; 0x952 <dir_rewind>
     e0c:	58 2f       	mov	r21, r24
		FatFs->buf[0] = 0;
     e0e:	e0 91 f9 00 	lds	r30, 0x00F9
     e12:	f0 91 fa 00 	lds	r31, 0x00FA
     e16:	06 80       	ldd	r0, Z+6	; 0x06
     e18:	f7 81       	ldd	r31, Z+7	; 0x07
     e1a:	e0 2d       	mov	r30, r0
     e1c:	10 82       	st	Z, r1
     e1e:	c7 c0       	rjmp	.+398    	; 0xfae <follow_path+0x208>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
     e20:	68 94       	set
     e22:	99 24       	eor	r9, r9
     e24:	95 f8       	bld	r9, 5
     e26:	61 2c       	mov	r6, r1
     e28:	68 94       	set
     e2a:	44 24       	eor	r4, r4
     e2c:	43 f8       	bld	r4, 3
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') break;
			i = 8; ni = 11;
     e2e:	34 2c       	mov	r3, r4
     e30:	0f 2e       	mov	r0, r31
     e32:	fb e0       	ldi	r31, 0x0B	; 11
     e34:	2f 2e       	mov	r2, r31
     e36:	f0 2d       	mov	r31, r0
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
     e38:	55 24       	eor	r5, r5
     e3a:	53 94       	inc	r5
	if (res != FR_OK) return res;

	dir = FatFs->buf;
	do {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
			? FR_DISK_ERR : FR_OK;
     e3c:	85 2c       	mov	r8, r5
     e3e:	76 2c       	mov	r7, r6
{
	BYTE c, d, ni, si, i, *sfn;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
     e40:	f7 01       	movw	r30, r14
     e42:	a2 81       	ldd	r26, Z+2	; 0x02
     e44:	b3 81       	ldd	r27, Z+3	; 0x03
     e46:	fd 01       	movw	r30, r26
     e48:	cd 01       	movw	r24, r26
     e4a:	0b 96       	adiw	r24, 0x0b	; 11

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
     e4c:	91 92       	st	Z+, r9
     e4e:	e8 17       	cp	r30, r24
     e50:	f9 07       	cpc	r31, r25
     e52:	e1 f7       	brne	.-8      	; 0xe4c <follow_path+0xa6>
     e54:	96 2d       	mov	r25, r6
     e56:	86 2d       	mov	r24, r6
     e58:	34 2d       	mov	r19, r4
     e5a:	01 c0       	rjmp	.+2      	; 0xe5e <follow_path+0xb8>
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = 0; ni = 8;
	p = *path;
	for (;;) {
		c = p[si++];
     e5c:	82 2f       	mov	r24, r18
     e5e:	21 e0       	ldi	r18, 0x01	; 1
     e60:	28 0f       	add	r18, r24
     e62:	f5 01       	movw	r30, r10
     e64:	e8 0f       	add	r30, r24
     e66:	f1 1d       	adc	r31, r1
     e68:	80 81       	ld	r24, Z
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
     e6a:	81 32       	cpi	r24, 0x21	; 33
     e6c:	90 f0       	brcs	.+36     	; 0xe92 <follow_path+0xec>
     e6e:	8f 32       	cpi	r24, 0x2F	; 47
     e70:	81 f0       	breq	.+32     	; 0xe92 <follow_path+0xec>
		if (c == '.' || i >= ni) {
     e72:	8e 32       	cpi	r24, 0x2E	; 46
     e74:	09 f4       	brne	.+2      	; 0xe78 <follow_path+0xd2>
     e76:	8d c0       	rjmp	.+282    	; 0xf92 <follow_path+0x1ec>
     e78:	93 17       	cp	r25, r19
     e7a:	58 f4       	brcc	.+22     	; 0xe92 <follow_path+0xec>
		if (IsDBCS1(c) && i >= ni - 1) {	/* DBC 1st byte? */
			d = p[si++];					/* Get 2nd byte */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
     e7c:	4f e9       	ldi	r20, 0x9F	; 159
     e7e:	48 0f       	add	r20, r24
     e80:	4a 31       	cpi	r20, 0x1A	; 26
     e82:	08 f4       	brcc	.+2      	; 0xe86 <follow_path+0xe0>
     e84:	80 52       	subi	r24, 0x20	; 32
			sfn[i++] = c;
     e86:	fd 01       	movw	r30, r26
     e88:	e9 0f       	add	r30, r25
     e8a:	f1 1d       	adc	r31, r1
     e8c:	80 83       	st	Z, r24
     e8e:	9f 5f       	subi	r25, 0xFF	; 255
     e90:	e5 cf       	rjmp	.-54     	; 0xe5c <follow_path+0xb6>
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
     e92:	a2 0e       	add	r10, r18
     e94:	b1 1c       	adc	r11, r1

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
     e96:	95 2d       	mov	r25, r5
     e98:	81 32       	cpi	r24, 0x21	; 33
     e9a:	08 f0       	brcs	.+2      	; 0xe9e <follow_path+0xf8>
     e9c:	96 2d       	mov	r25, r6
     e9e:	1b 96       	adiw	r26, 0x0b	; 11
     ea0:	9c 93       	st	X, r25
{
	FRESULT res;
	BYTE c, *dir;


	res = dir_rewind(dj);			/* Rewind directory object */
     ea2:	c7 01       	movw	r24, r14
     ea4:	0e 94 a9 04 	call	0x952	; 0x952 <dir_rewind>
     ea8:	58 2f       	mov	r21, r24
	if (res != FR_OK) return res;
     eaa:	81 11       	cpse	r24, r1
     eac:	7e c0       	rjmp	.+252    	; 0xfaa <follow_path+0x204>

	dir = FatFs->buf;
     eae:	e0 91 f9 00 	lds	r30, 0x00F9
     eb2:	f0 91 fa 00 	lds	r31, 0x00FA
     eb6:	c6 80       	ldd	r12, Z+6	; 0x06
     eb8:	d7 80       	ldd	r13, Z+7	; 0x07
     eba:	e6 01       	movw	r28, r12
     ebc:	2b 96       	adiw	r28, 0x0b	; 11
	do {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
     ebe:	d7 01       	movw	r26, r14
     ec0:	2d 91       	ld	r18, X+
     ec2:	3c 91       	ld	r19, X
     ec4:	11 97       	sbiw	r26, 0x01	; 1
     ec6:	2f 70       	andi	r18, 0x0F	; 15
     ec8:	33 27       	eor	r19, r19
     eca:	22 0f       	add	r18, r18
     ecc:	33 1f       	adc	r19, r19
     ece:	22 95       	swap	r18
     ed0:	32 95       	swap	r19
     ed2:	30 7f       	andi	r19, 0xF0	; 240
     ed4:	32 27       	eor	r19, r18
     ed6:	20 7f       	andi	r18, 0xF0	; 240
     ed8:	32 27       	eor	r19, r18
     eda:	1c 96       	adiw	r26, 0x0c	; 12
     edc:	4d 91       	ld	r20, X+
     ede:	5d 91       	ld	r21, X+
     ee0:	6d 91       	ld	r22, X+
     ee2:	7c 91       	ld	r23, X
     ee4:	1f 97       	sbiw	r26, 0x0f	; 15
     ee6:	00 e2       	ldi	r16, 0x20	; 32
     ee8:	10 e0       	ldi	r17, 0x00	; 0
     eea:	c6 01       	movw	r24, r12
     eec:	0e 94 c4 02 	call	0x588	; 0x588 <disk_readp>
			? FR_DISK_ERR : FR_OK;
     ef0:	58 2d       	mov	r21, r8
     ef2:	81 11       	cpse	r24, r1
     ef4:	01 c0       	rjmp	.+2      	; 0xef8 <follow_path+0x152>
     ef6:	57 2d       	mov	r21, r7
		if (res != FR_OK) break;
     ef8:	51 11       	cpse	r21, r1
     efa:	57 c0       	rjmp	.+174    	; 0xfaa <follow_path+0x204>
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
     efc:	f6 01       	movw	r30, r12
     efe:	80 81       	ld	r24, Z
     f00:	88 23       	and	r24, r24
     f02:	c9 f0       	breq	.+50     	; 0xf36 <follow_path+0x190>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
     f04:	83 85       	ldd	r24, Z+11	; 0x0b
     f06:	83 fd       	sbrc	r24, 3
     f08:	0f c0       	rjmp	.+30     	; 0xf28 <follow_path+0x182>
     f0a:	d7 01       	movw	r26, r14
     f0c:	12 96       	adiw	r26, 0x02	; 2
     f0e:	2d 91       	ld	r18, X+
     f10:	3c 91       	ld	r19, X
     f12:	13 97       	sbiw	r26, 0x03	; 3
     f14:	d9 01       	movw	r26, r18
     f16:	04 c0       	rjmp	.+8      	; 0xf20 <follow_path+0x17a>
/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
     f18:	ec 17       	cp	r30, r28
     f1a:	fd 07       	cpc	r31, r29
     f1c:	09 f4       	brne	.+2      	; 0xf20 <follow_path+0x17a>
     f1e:	3f c0       	rjmp	.+126    	; 0xf9e <follow_path+0x1f8>
     f20:	41 91       	ld	r20, Z+
     f22:	9d 91       	ld	r25, X+
     f24:	49 17       	cp	r20, r25
     f26:	c1 f3       	breq	.-16     	; 0xf18 <follow_path+0x172>
		if (res != FR_OK) break;
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
		res = dir_next(dj);							/* Next entry */
     f28:	c7 01       	movw	r24, r14
     f2a:	0e 94 55 06 	call	0xcaa	; 0xcaa <dir_next>
     f2e:	58 2f       	mov	r21, r24
	} while (res == FR_OK);
     f30:	88 23       	and	r24, r24
     f32:	29 f2       	breq	.-118    	; 0xebe <follow_path+0x118>
     f34:	3a c0       	rjmp	.+116    	; 0xfaa <follow_path+0x204>
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
     f36:	d7 01       	movw	r26, r14
     f38:	12 96       	adiw	r26, 0x02	; 2
     f3a:	ed 91       	ld	r30, X+
     f3c:	fc 91       	ld	r31, X
     f3e:	13 97       	sbiw	r26, 0x03	; 3
     f40:	83 85       	ldd	r24, Z+11	; 0x0b
     f42:	88 23       	and	r24, r24
     f44:	11 f1       	breq	.+68     	; 0xf8a <follow_path+0x1e4>
     f46:	1f c0       	rjmp	.+62     	; 0xf86 <follow_path+0x1e0>
					res = FR_NO_PATH;
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			dir = FatFs->buf;				/* There is next segment. Follow the sub directory */
     f48:	e0 91 f9 00 	lds	r30, 0x00F9
     f4c:	f0 91 fa 00 	lds	r31, 0x00FA
     f50:	06 80       	ldd	r0, Z+6	; 0x06
     f52:	f7 81       	ldd	r31, Z+7	; 0x07
     f54:	e0 2d       	mov	r30, r0
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
     f56:	83 85       	ldd	r24, Z+11	; 0x0b
     f58:	84 ff       	sbrs	r24, 4
     f5a:	19 c0       	rjmp	.+50     	; 0xf8e <follow_path+0x1e8>
				res = FR_NO_PATH; break;
			}
			dj->sclust =
#if _FS_FAT32
				((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | 
     f5c:	84 89       	ldd	r24, Z+20	; 0x14
     f5e:	95 89       	ldd	r25, Z+21	; 0x15
     f60:	a0 e0       	ldi	r26, 0x00	; 0
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	dc 01       	movw	r26, r24
     f66:	99 27       	eor	r25, r25
     f68:	88 27       	eor	r24, r24
     f6a:	42 8d       	ldd	r20, Z+26	; 0x1a
     f6c:	53 8d       	ldd	r21, Z+27	; 0x1b
     f6e:	60 e0       	ldi	r22, 0x00	; 0
     f70:	70 e0       	ldi	r23, 0x00	; 0
     f72:	84 2b       	or	r24, r20
     f74:	95 2b       	or	r25, r21
     f76:	a6 2b       	or	r26, r22
     f78:	b7 2b       	or	r27, r23
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			dir = FatFs->buf;				/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust =
     f7a:	f7 01       	movw	r30, r14
     f7c:	84 83       	std	Z+4, r24	; 0x04
     f7e:	95 83       	std	Z+5, r25	; 0x05
     f80:	a6 83       	std	Z+6, r26	; 0x06
     f82:	b7 83       	std	Z+7, r27	; 0x07
#if _FS_FAT32
				((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | 
#endif
				LD_WORD(dir+DIR_FstClusLO);
		}
     f84:	5d cf       	rjmp	.-326    	; 0xe40 <follow_path+0x9a>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
     f86:	53 e0       	ldi	r21, 0x03	; 3
     f88:	12 c0       	rjmp	.+36     	; 0xfae <follow_path+0x208>
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
					res = FR_NO_PATH;
     f8a:	54 e0       	ldi	r21, 0x04	; 4
     f8c:	10 c0       	rjmp	.+32     	; 0xfae <follow_path+0x208>
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			dir = FatFs->buf;				/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
     f8e:	54 e0       	ldi	r21, 0x04	; 4
     f90:	0e c0       	rjmp	.+28     	; 0xfae <follow_path+0x208>
	p = *path;
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') break;
     f92:	38 30       	cpi	r19, 0x08	; 8
     f94:	09 f0       	breq	.+2      	; 0xf98 <follow_path+0x1f2>
     f96:	7d cf       	rjmp	.-262    	; 0xe92 <follow_path+0xec>
			i = 8; ni = 11;
     f98:	93 2d       	mov	r25, r3
     f9a:	32 2d       	mov	r19, r2
     f9c:	5f cf       	rjmp	.-322    	; 0xe5c <follow_path+0xb6>
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
					res = FR_NO_PATH;
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
     f9e:	d9 01       	movw	r26, r18
     fa0:	1b 96       	adiw	r26, 0x0b	; 11
     fa2:	8c 91       	ld	r24, X
     fa4:	88 23       	and	r24, r24
     fa6:	81 f2       	breq	.-96     	; 0xf48 <follow_path+0x1a2>
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <follow_path+0x208>
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
     faa:	53 30       	cpi	r21, 0x03	; 3
     fac:	21 f2       	breq	.-120    	; 0xf36 <follow_path+0x190>
				LD_WORD(dir+DIR_FstClusLO);
		}
	}

	return res;
}
     fae:	85 2f       	mov	r24, r21
     fb0:	df 91       	pop	r29
     fb2:	cf 91       	pop	r28
     fb4:	1f 91       	pop	r17
     fb6:	0f 91       	pop	r16
     fb8:	ff 90       	pop	r15
     fba:	ef 90       	pop	r14
     fbc:	df 90       	pop	r13
     fbe:	cf 90       	pop	r12
     fc0:	bf 90       	pop	r11
     fc2:	af 90       	pop	r10
     fc4:	9f 90       	pop	r9
     fc6:	8f 90       	pop	r8
     fc8:	7f 90       	pop	r7
     fca:	6f 90       	pop	r6
     fcc:	5f 90       	pop	r5
     fce:	4f 90       	pop	r4
     fd0:	3f 90       	pop	r3
     fd2:	2f 90       	pop	r2
     fd4:	08 95       	ret

00000fd6 <pf_mount>:
/*-----------------------------------------------------------------------*/

FRESULT pf_mount (
	FATFS *fs		/* Pointer to new file system object (NULL: Unmount) */
)
{
     fd6:	4f 92       	push	r4
     fd8:	5f 92       	push	r5
     fda:	6f 92       	push	r6
     fdc:	7f 92       	push	r7
     fde:	9f 92       	push	r9
     fe0:	af 92       	push	r10
     fe2:	bf 92       	push	r11
     fe4:	cf 92       	push	r12
     fe6:	df 92       	push	r13
     fe8:	ef 92       	push	r14
     fea:	ff 92       	push	r15
     fec:	0f 93       	push	r16
     fee:	1f 93       	push	r17
     ff0:	cf 93       	push	r28
     ff2:	df 93       	push	r29
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
     ff8:	a8 97       	sbiw	r28, 0x28	; 40
     ffa:	0f b6       	in	r0, 0x3f	; 63
     ffc:	f8 94       	cli
     ffe:	de bf       	out	0x3e, r29	; 62
    1000:	0f be       	out	0x3f, r0	; 63
    1002:	cd bf       	out	0x3d, r28	; 61
    1004:	5c 01       	movw	r10, r24
	BYTE fmt, buf[36];
	DWORD bsect, fsize, tsect, mclst;


	FatFs = 0;
    1006:	10 92 fa 00 	sts	0x00FA, r1
    100a:	10 92 f9 00 	sts	0x00F9, r1
	if (!fs) return FR_OK;				/* Unregister fs object */
    100e:	00 97       	sbiw	r24, 0x00	; 0
    1010:	09 f4       	brne	.+2      	; 0x1014 <pf_mount+0x3e>
    1012:	ec c0       	rjmp	.+472    	; 0x11ec <pf_mount+0x216>

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
    1014:	0e 94 af 03 	call	0x75e	; 0x75e <disk_initialize>
    1018:	80 fd       	sbrc	r24, 0
    101a:	ea c0       	rjmp	.+468    	; 0x11f0 <pf_mount+0x21a>
		return FR_NOT_READY;

	/* Search FAT partition on the drive */
	bsect = 0;
	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
    101c:	40 e0       	ldi	r20, 0x00	; 0
    101e:	50 e0       	ldi	r21, 0x00	; 0
    1020:	ba 01       	movw	r22, r20
    1022:	ce 01       	movw	r24, r28
    1024:	01 96       	adiw	r24, 0x01	; 1
    1026:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
    102a:	81 30       	cpi	r24, 0x01	; 1
    102c:	e1 f4       	brne	.+56     	; 0x1066 <pf_mount+0x90>
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
    102e:	00 e1       	ldi	r16, 0x10	; 16
    1030:	10 e0       	ldi	r17, 0x00	; 0
    1032:	2e eb       	ldi	r18, 0xBE	; 190
    1034:	31 e0       	ldi	r19, 0x01	; 1
    1036:	40 e0       	ldi	r20, 0x00	; 0
    1038:	50 e0       	ldi	r21, 0x00	; 0
    103a:	ba 01       	movw	r22, r20
    103c:	ce 01       	movw	r24, r28
    103e:	01 96       	adiw	r24, 0x01	; 1
    1040:	0e 94 c4 02 	call	0x588	; 0x588 <disk_readp>
    1044:	81 11       	cpse	r24, r1
    1046:	d6 c0       	rjmp	.+428    	; 0x11f4 <pf_mount+0x21e>
			fmt = 3;
		} else {
			if (buf[4]) {					/* Is the partition existing? */
    1048:	8d 81       	ldd	r24, Y+5	; 0x05
    104a:	88 23       	and	r24, r24
    104c:	09 f4       	brne	.+2      	; 0x1050 <pf_mount+0x7a>
    104e:	d4 c0       	rjmp	.+424    	; 0x11f8 <pf_mount+0x222>
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
    1050:	49 84       	ldd	r4, Y+9	; 0x09
    1052:	5a 84       	ldd	r5, Y+10	; 0x0a
    1054:	6b 84       	ldd	r6, Y+11	; 0x0b
    1056:	7c 84       	ldd	r7, Y+12	; 0x0c
				fmt = check_fs(buf, bsect);	/* Check the partition */
    1058:	b3 01       	movw	r22, r6
    105a:	a2 01       	movw	r20, r4
    105c:	ce 01       	movw	r24, r28
    105e:	01 96       	adiw	r24, 0x01	; 1
    1060:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <check_fs>
    1064:	03 c0       	rjmp	.+6      	; 0x106c <pf_mount+0x96>

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
		return FR_NOT_READY;

	/* Search FAT partition on the drive */
	bsect = 0;
    1066:	41 2c       	mov	r4, r1
    1068:	51 2c       	mov	r5, r1
    106a:	32 01       	movw	r6, r4
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
				fmt = check_fs(buf, bsect);	/* Check the partition */
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    106c:	83 30       	cpi	r24, 0x03	; 3
    106e:	09 f4       	brne	.+2      	; 0x1072 <pf_mount+0x9c>
    1070:	c5 c0       	rjmp	.+394    	; 0x11fc <pf_mount+0x226>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
    1072:	81 11       	cpse	r24, r1
    1074:	c5 c0       	rjmp	.+394    	; 0x1200 <pf_mount+0x22a>

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof(buf))) return FR_DISK_ERR;
    1076:	04 e2       	ldi	r16, 0x24	; 36
    1078:	10 e0       	ldi	r17, 0x00	; 0
    107a:	2d e0       	ldi	r18, 0x0D	; 13
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	b3 01       	movw	r22, r6
    1080:	a2 01       	movw	r20, r4
    1082:	ce 01       	movw	r24, r28
    1084:	01 96       	adiw	r24, 0x01	; 1
    1086:	0e 94 c4 02 	call	0x588	; 0x588 <disk_readp>
    108a:	81 11       	cpse	r24, r1
    108c:	bb c0       	rjmp	.+374    	; 0x1204 <pf_mount+0x22e>

	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
    108e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1090:	3b 85       	ldd	r19, Y+11	; 0x0b
    1092:	40 e0       	ldi	r20, 0x00	; 0
    1094:	50 e0       	ldi	r21, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);
    1096:	21 15       	cp	r18, r1
    1098:	31 05       	cpc	r19, r1
    109a:	41 05       	cpc	r20, r1
    109c:	51 05       	cpc	r21, r1
    109e:	21 f4       	brne	.+8      	; 0x10a8 <pf_mount+0xd2>
    10a0:	28 8d       	ldd	r18, Y+24	; 0x18
    10a2:	39 8d       	ldd	r19, Y+25	; 0x19
    10a4:	4a 8d       	ldd	r20, Y+26	; 0x1a
    10a6:	5b 8d       	ldd	r21, Y+27	; 0x1b

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
    10a8:	ac 81       	ldd	r26, Y+4	; 0x04
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	0e 94 13 0c 	call	0x1826	; 0x1826 <__muluhisi3>
    10b0:	6b 01       	movw	r12, r22
    10b2:	7c 01       	movw	r14, r24
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
    10b4:	8a 81       	ldd	r24, Y+2	; 0x02
    10b6:	9b 81       	ldd	r25, Y+3	; 0x03
    10b8:	8c 01       	movw	r16, r24
    10ba:	20 e0       	ldi	r18, 0x00	; 0
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	40 0e       	add	r4, r16
    10c0:	51 1e       	adc	r5, r17
    10c2:	62 1e       	adc	r6, r18
    10c4:	73 1e       	adc	r7, r19
    10c6:	d5 01       	movw	r26, r10
    10c8:	1c 96       	adiw	r26, 0x0c	; 12
    10ca:	4d 92       	st	X+, r4
    10cc:	5d 92       	st	X+, r5
    10ce:	6d 92       	st	X+, r6
    10d0:	7c 92       	st	X, r7
    10d2:	1f 97       	sbiw	r26, 0x0f	; 15
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
    10d4:	99 80       	ldd	r9, Y+1	; 0x01
    10d6:	11 96       	adiw	r26, 0x01	; 1
    10d8:	9c 92       	st	X, r9
    10da:	11 97       	sbiw	r26, 0x01	; 1
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
    10dc:	ed 81       	ldd	r30, Y+5	; 0x05
    10de:	fe 81       	ldd	r31, Y+6	; 0x06
    10e0:	15 96       	adiw	r26, 0x05	; 5
    10e2:	fc 93       	st	X, r31
    10e4:	ee 93       	st	-X, r30
    10e6:	14 97       	sbiw	r26, 0x04	; 4
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
    10e8:	6f 81       	ldd	r22, Y+7	; 0x07
    10ea:	78 85       	ldd	r23, Y+8	; 0x08
    10ec:	cb 01       	movw	r24, r22
    10ee:	a0 e0       	ldi	r26, 0x00	; 0
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
    10f2:	00 97       	sbiw	r24, 0x00	; 0
    10f4:	a1 05       	cpc	r26, r1
    10f6:	b1 05       	cpc	r27, r1
    10f8:	21 f4       	brne	.+8      	; 0x1102 <pf_mount+0x12c>
    10fa:	8c 89       	ldd	r24, Y+20	; 0x14
    10fc:	9d 89       	ldd	r25, Y+21	; 0x15
    10fe:	ae 89       	ldd	r26, Y+22	; 0x16
    1100:	bf 89       	ldd	r27, Y+23	; 0x17
	mclst = (tsect						/* Last cluster# + 1 */
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
    1102:	f2 95       	swap	r31
    1104:	e2 95       	swap	r30
    1106:	ef 70       	andi	r30, 0x0F	; 15
    1108:	ef 27       	eor	r30, r31
    110a:	ff 70       	andi	r31, 0x0F	; 15
    110c:	ef 27       	eor	r30, r31
    110e:	af 01       	movw	r20, r30
    1110:	60 e0       	ldi	r22, 0x00	; 0
    1112:	70 e0       	ldi	r23, 0x00	; 0
    1114:	4d a3       	std	Y+37, r20	; 0x25
    1116:	5e a3       	std	Y+38, r21	; 0x26
    1118:	6f a3       	std	Y+39, r22	; 0x27
    111a:	78 a7       	std	Y+40, r23	; 0x28
    111c:	80 1b       	sub	r24, r16
    111e:	91 0b       	sbc	r25, r17
    1120:	a2 0b       	sbc	r26, r18
    1122:	b3 0b       	sbc	r27, r19
    1124:	8c 19       	sub	r24, r12
    1126:	9d 09       	sbc	r25, r13
    1128:	ae 09       	sbc	r26, r14
    112a:	bf 09       	sbc	r27, r15
    112c:	bc 01       	movw	r22, r24
    112e:	cd 01       	movw	r24, r26
    1130:	2d a1       	ldd	r18, Y+37	; 0x25
    1132:	3e a1       	ldd	r19, Y+38	; 0x26
    1134:	4f a1       	ldd	r20, Y+39	; 0x27
    1136:	58 a5       	ldd	r21, Y+40	; 0x28
    1138:	62 1b       	sub	r22, r18
    113a:	73 0b       	sbc	r23, r19
    113c:	84 0b       	sbc	r24, r20
    113e:	95 0b       	sbc	r25, r21
		) / fs->csize + 2;
    1140:	29 2d       	mov	r18, r9
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	40 e0       	ldi	r20, 0x00	; 0
    1146:	50 e0       	ldi	r21, 0x00	; 0
    1148:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <__udivmodsi4>
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
	mclst = (tsect						/* Last cluster# + 1 */
    114c:	ba 01       	movw	r22, r20
    114e:	a9 01       	movw	r20, r18
    1150:	4e 5f       	subi	r20, 0xFE	; 254
    1152:	5f 4f       	sbci	r21, 0xFF	; 255
    1154:	6f 4f       	sbci	r22, 0xFF	; 255
    1156:	7f 4f       	sbci	r23, 0xFF	; 255
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
		) / fs->csize + 2;
	fs->max_clust = (CLUST)mclst;
    1158:	d5 01       	movw	r26, r10
    115a:	18 96       	adiw	r26, 0x08	; 8
    115c:	4d 93       	st	X+, r20
    115e:	5d 93       	st	X+, r21
    1160:	6d 93       	st	X+, r22
    1162:	7c 93       	st	X, r23
    1164:	1b 97       	sbiw	r26, 0x0b	; 11

	fmt = FS_FAT12;							/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;		/* Number of clusters >= 0xFF5 */
    1166:	47 3f       	cpi	r20, 0xF7	; 247
    1168:	bf e0       	ldi	r27, 0x0F	; 15
    116a:	5b 07       	cpc	r21, r27
    116c:	61 05       	cpc	r22, r1
    116e:	71 05       	cpc	r23, r1
    1170:	10 f4       	brcc	.+4      	; 0x1176 <pf_mount+0x1a0>
	mclst = (tsect						/* Last cluster# + 1 */
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
		) / fs->csize + 2;
	fs->max_clust = (CLUST)mclst;

	fmt = FS_FAT12;							/* Determine the FAT sub type */
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	01 c0       	rjmp	.+2      	; 0x1178 <pf_mount+0x1a2>
	if (mclst >= 0xFF7) fmt = FS_FAT16;		/* Number of clusters >= 0xFF5 */
    1176:	82 e0       	ldi	r24, 0x02	; 2
	if (mclst >= 0xFFF7)					/* Number of clusters >= 0xFFF5 */
    1178:	47 3f       	cpi	r20, 0xF7	; 247
    117a:	5f 4f       	sbci	r21, 0xFF	; 255
    117c:	61 05       	cpc	r22, r1
    117e:	71 05       	cpc	r23, r1
    1180:	08 f0       	brcs	.+2      	; 0x1184 <pf_mount+0x1ae>
    1182:	42 c0       	rjmp	.+132    	; 0x1208 <pf_mount+0x232>
		fmt = FS_FAT32;
#else
		return FR_NO_FILESYSTEM;
#endif

	fs->fs_type = fmt;		/* FAT sub-type */
    1184:	d5 01       	movw	r26, r10
    1186:	8c 93       	st	X, r24
#if _FS_FAT32
	if (fmt == FS_FAT32)
    1188:	83 30       	cpi	r24, 0x03	; 3
    118a:	51 f4       	brne	.+20     	; 0x11a0 <pf_mount+0x1ca>
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
    118c:	88 a1       	ldd	r24, Y+32	; 0x20
    118e:	99 a1       	ldd	r25, Y+33	; 0x21
    1190:	aa a1       	ldd	r26, Y+34	; 0x22
    1192:	bb a1       	ldd	r27, Y+35	; 0x23
    1194:	f5 01       	movw	r30, r10
    1196:	80 8b       	std	Z+16, r24	; 0x10
    1198:	91 8b       	std	Z+17, r25	; 0x11
    119a:	a2 8b       	std	Z+18, r26	; 0x12
    119c:	b3 8b       	std	Z+19, r27	; 0x13
    119e:	0b c0       	rjmp	.+22     	; 0x11b6 <pf_mount+0x1e0>
	else
#endif
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    11a0:	d7 01       	movw	r26, r14
    11a2:	c6 01       	movw	r24, r12
    11a4:	84 0d       	add	r24, r4
    11a6:	95 1d       	adc	r25, r5
    11a8:	a6 1d       	adc	r26, r6
    11aa:	b7 1d       	adc	r27, r7
    11ac:	f5 01       	movw	r30, r10
    11ae:	80 8b       	std	Z+16, r24	; 0x10
    11b0:	91 8b       	std	Z+17, r25	; 0x11
    11b2:	a2 8b       	std	Z+18, r26	; 0x12
    11b4:	b3 8b       	std	Z+19, r27	; 0x13
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
    11b6:	2d a1       	ldd	r18, Y+37	; 0x25
    11b8:	3e a1       	ldd	r19, Y+38	; 0x26
    11ba:	4f a1       	ldd	r20, Y+39	; 0x27
    11bc:	58 a5       	ldd	r21, Y+40	; 0x28
    11be:	42 0e       	add	r4, r18
    11c0:	53 1e       	adc	r5, r19
    11c2:	64 1e       	adc	r6, r20
    11c4:	75 1e       	adc	r7, r21
    11c6:	c4 0c       	add	r12, r4
    11c8:	d5 1c       	adc	r13, r5
    11ca:	e6 1c       	adc	r14, r6
    11cc:	f7 1c       	adc	r15, r7
    11ce:	d5 01       	movw	r26, r10
    11d0:	54 96       	adiw	r26, 0x14	; 20
    11d2:	cd 92       	st	X+, r12
    11d4:	dd 92       	st	X+, r13
    11d6:	ed 92       	st	X+, r14
    11d8:	fc 92       	st	X, r15
    11da:	57 97       	sbiw	r26, 0x17	; 23

	fs->flag = 0;
    11dc:	12 96       	adiw	r26, 0x02	; 2
    11de:	1c 92       	st	X, r1
	FatFs = fs;
    11e0:	b0 92 fa 00 	sts	0x00FA, r11
    11e4:	a0 92 f9 00 	sts	0x00F9, r10

	return FR_OK;
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	12 c0       	rjmp	.+36     	; 0x1210 <pf_mount+0x23a>
	BYTE fmt, buf[36];
	DWORD bsect, fsize, tsect, mclst;


	FatFs = 0;
	if (!fs) return FR_OK;				/* Unregister fs object */
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	10 c0       	rjmp	.+32     	; 0x1210 <pf_mount+0x23a>

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
		return FR_NOT_READY;
    11f0:	82 e0       	ldi	r24, 0x02	; 2
    11f2:	0e c0       	rjmp	.+28     	; 0x1210 <pf_mount+0x23a>
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
				fmt = check_fs(buf, bsect);	/* Check the partition */
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	0c c0       	rjmp	.+24     	; 0x1210 <pf_mount+0x23a>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
    11f8:	87 e0       	ldi	r24, 0x07	; 7
    11fa:	0a c0       	rjmp	.+20     	; 0x1210 <pf_mount+0x23a>
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
				fmt = check_fs(buf, bsect);	/* Check the partition */
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	08 c0       	rjmp	.+16     	; 0x1210 <pf_mount+0x23a>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
    1200:	87 e0       	ldi	r24, 0x07	; 7
    1202:	06 c0       	rjmp	.+12     	; 0x1210 <pf_mount+0x23a>

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof(buf))) return FR_DISK_ERR;
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	04 c0       	rjmp	.+8      	; 0x1210 <pf_mount+0x23a>
		fmt = FS_FAT32;
#else
		return FR_NO_FILESYSTEM;
#endif

	fs->fs_type = fmt;		/* FAT sub-type */
    1208:	83 e0       	ldi	r24, 0x03	; 3
    120a:	f5 01       	movw	r30, r10
    120c:	80 83       	st	Z, r24
    120e:	be cf       	rjmp	.-132    	; 0x118c <pf_mount+0x1b6>

	fs->flag = 0;
	FatFs = fs;

	return FR_OK;
}
    1210:	a8 96       	adiw	r28, 0x28	; 40
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	f8 94       	cli
    1216:	de bf       	out	0x3e, r29	; 62
    1218:	0f be       	out	0x3f, r0	; 63
    121a:	cd bf       	out	0x3d, r28	; 61
    121c:	df 91       	pop	r29
    121e:	cf 91       	pop	r28
    1220:	1f 91       	pop	r17
    1222:	0f 91       	pop	r16
    1224:	ff 90       	pop	r15
    1226:	ef 90       	pop	r14
    1228:	df 90       	pop	r13
    122a:	cf 90       	pop	r12
    122c:	bf 90       	pop	r11
    122e:	af 90       	pop	r10
    1230:	9f 90       	pop	r9
    1232:	7f 90       	pop	r7
    1234:	6f 90       	pop	r6
    1236:	5f 90       	pop	r5
    1238:	4f 90       	pop	r4
    123a:	08 95       	ret

0000123c <pf_open>:
/*-----------------------------------------------------------------------*/

FRESULT pf_open (
	const char *path	/* Pointer to the file name */
)
{
    123c:	0f 93       	push	r16
    123e:	1f 93       	push	r17
    1240:	cf 93       	push	r28
    1242:	df 93       	push	r29
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
    1248:	ec 97       	sbiw	r28, 0x3c	; 60
    124a:	0f b6       	in	r0, 0x3f	; 63
    124c:	f8 94       	cli
    124e:	de bf       	out	0x3e, r29	; 62
    1250:	0f be       	out	0x3f, r0	; 63
    1252:	cd bf       	out	0x3d, r28	; 61
	FRESULT res;
	DIR dj;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
    1254:	00 91 f9 00 	lds	r16, 0x00F9
    1258:	10 91 fa 00 	lds	r17, 0x00FA


	if (!fs)						/* Check file system */
    125c:	01 15       	cp	r16, r1
    125e:	11 05       	cpc	r17, r1
    1260:	e1 f1       	breq	.+120    	; 0x12da <pf_open+0x9e>
		return FR_NOT_ENABLED;

	fs->flag = 0;
    1262:	f8 01       	movw	r30, r16
    1264:	12 82       	std	Z+2, r1	; 0x02
	fs->buf = dir;
    1266:	9e 01       	movw	r18, r28
    1268:	23 5e       	subi	r18, 0xE3	; 227
    126a:	3f 4f       	sbci	r19, 0xFF	; 255
    126c:	37 83       	std	Z+7, r19	; 0x07
    126e:	26 83       	std	Z+6, r18	; 0x06
	dj.fn = sp;
    1270:	2c 50       	subi	r18, 0x0C	; 12
    1272:	31 09       	sbc	r19, r1
    1274:	3c 83       	std	Y+4, r19	; 0x04
    1276:	2b 83       	std	Y+3, r18	; 0x03
	res = follow_path(&dj, path);	/* Follow the file path */
    1278:	bc 01       	movw	r22, r24
    127a:	ce 01       	movw	r24, r28
    127c:	01 96       	adiw	r24, 0x01	; 1
    127e:	0e 94 d3 06 	call	0xda6	; 0xda6 <follow_path>
	if (res != FR_OK) return res;	/* Follow failed */
    1282:	81 11       	cpse	r24, r1
    1284:	2f c0       	rjmp	.+94     	; 0x12e4 <pf_open+0xa8>
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
    1286:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1288:	88 23       	and	r24, r24
    128a:	49 f1       	breq	.+82     	; 0x12de <pf_open+0xa2>
    128c:	88 a5       	ldd	r24, Y+40	; 0x28
    128e:	84 fd       	sbrc	r24, 4
    1290:	28 c0       	rjmp	.+80     	; 0x12e2 <pf_open+0xa6>
		return FR_NO_FILE;

	fs->org_clust =						/* File start cluster */
#if _FS_FAT32
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) |
    1292:	89 a9       	ldd	r24, Y+49	; 0x31
    1294:	9a a9       	ldd	r25, Y+50	; 0x32
    1296:	a0 e0       	ldi	r26, 0x00	; 0
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	dc 01       	movw	r26, r24
    129c:	99 27       	eor	r25, r25
    129e:	88 27       	eor	r24, r24
    12a0:	4f a9       	ldd	r20, Y+55	; 0x37
    12a2:	58 ad       	ldd	r21, Y+56	; 0x38
    12a4:	60 e0       	ldi	r22, 0x00	; 0
    12a6:	70 e0       	ldi	r23, 0x00	; 0
    12a8:	84 2b       	or	r24, r20
    12aa:	95 2b       	or	r25, r21
    12ac:	a6 2b       	or	r26, r22
    12ae:	b7 2b       	or	r27, r23
	res = follow_path(&dj, path);	/* Follow the file path */
	if (res != FR_OK) return res;	/* Follow failed */
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
		return FR_NO_FILE;

	fs->org_clust =						/* File start cluster */
    12b0:	f8 01       	movw	r30, r16
    12b2:	80 a3       	std	Z+32, r24	; 0x20
    12b4:	91 a3       	std	Z+33, r25	; 0x21
    12b6:	a2 a3       	std	Z+34, r26	; 0x22
    12b8:	b3 a3       	std	Z+35, r27	; 0x23
#if _FS_FAT32
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) |
#endif
		LD_WORD(dir+DIR_FstClusLO);
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    12ba:	89 ad       	ldd	r24, Y+57	; 0x39
    12bc:	9a ad       	ldd	r25, Y+58	; 0x3a
    12be:	ab ad       	ldd	r26, Y+59	; 0x3b
    12c0:	bc ad       	ldd	r27, Y+60	; 0x3c
    12c2:	84 8f       	std	Z+28, r24	; 0x1c
    12c4:	95 8f       	std	Z+29, r25	; 0x1d
    12c6:	a6 8f       	std	Z+30, r26	; 0x1e
    12c8:	b7 8f       	std	Z+31, r27	; 0x1f
	fs->fptr = 0;						/* File pointer */
    12ca:	10 8e       	std	Z+24, r1	; 0x18
    12cc:	11 8e       	std	Z+25, r1	; 0x19
    12ce:	12 8e       	std	Z+26, r1	; 0x1a
    12d0:	13 8e       	std	Z+27, r1	; 0x1b
	fs->flag = FA_OPENED;
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	82 83       	std	Z+2, r24	; 0x02

	return FR_OK;
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	05 c0       	rjmp	.+10     	; 0x12e4 <pf_open+0xa8>
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;


	if (!fs)						/* Check file system */
		return FR_NOT_ENABLED;
    12da:	86 e0       	ldi	r24, 0x06	; 6
    12dc:	03 c0       	rjmp	.+6      	; 0x12e4 <pf_open+0xa8>
	fs->buf = dir;
	dj.fn = sp;
	res = follow_path(&dj, path);	/* Follow the file path */
	if (res != FR_OK) return res;	/* Follow failed */
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
		return FR_NO_FILE;
    12de:	83 e0       	ldi	r24, 0x03	; 3
    12e0:	01 c0       	rjmp	.+2      	; 0x12e4 <pf_open+0xa8>
    12e2:	83 e0       	ldi	r24, 0x03	; 3
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
	fs->fptr = 0;						/* File pointer */
	fs->flag = FA_OPENED;

	return FR_OK;
}
    12e4:	ec 96       	adiw	r28, 0x3c	; 60
    12e6:	0f b6       	in	r0, 0x3f	; 63
    12e8:	f8 94       	cli
    12ea:	de bf       	out	0x3e, r29	; 62
    12ec:	0f be       	out	0x3f, r0	; 63
    12ee:	cd bf       	out	0x3d, r28	; 61
    12f0:	df 91       	pop	r29
    12f2:	cf 91       	pop	r28
    12f4:	1f 91       	pop	r17
    12f6:	0f 91       	pop	r16
    12f8:	08 95       	ret

000012fa <pf_read>:
FRESULT pf_read (
	void* buff,		/* Pointer to the read buffer (NULL:Forward data to the stream)*/
	WORD btr,		/* Number of bytes to read */
	WORD* br		/* Pointer to number of bytes read */
)
{
    12fa:	2f 92       	push	r2
    12fc:	3f 92       	push	r3
    12fe:	4f 92       	push	r4
    1300:	5f 92       	push	r5
    1302:	6f 92       	push	r6
    1304:	7f 92       	push	r7
    1306:	8f 92       	push	r8
    1308:	9f 92       	push	r9
    130a:	af 92       	push	r10
    130c:	bf 92       	push	r11
    130e:	cf 92       	push	r12
    1310:	df 92       	push	r13
    1312:	ef 92       	push	r14
    1314:	ff 92       	push	r15
    1316:	0f 93       	push	r16
    1318:	1f 93       	push	r17
    131a:	cf 93       	push	r28
    131c:	df 93       	push	r29
    131e:	2c 01       	movw	r4, r24
    1320:	6b 01       	movw	r12, r22
    1322:	3a 01       	movw	r6, r20
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	BYTE *rbuff = buff;
	WORD rcnt;
	FATFS *fs = FatFs;
    1324:	c0 91 f9 00 	lds	r28, 0x00F9
    1328:	d0 91 fa 00 	lds	r29, 0x00FA


	*br = 0;
    132c:	fa 01       	movw	r30, r20
    132e:	11 82       	std	Z+1, r1	; 0x01
    1330:	10 82       	st	Z, r1
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    1332:	20 97       	sbiw	r28, 0x00	; 0
    1334:	09 f4       	brne	.+2      	; 0x1338 <pf_read+0x3e>
    1336:	b5 c0       	rjmp	.+362    	; 0x14a2 <pf_read+0x1a8>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	80 ff       	sbrs	r24, 0
    133c:	b4 c0       	rjmp	.+360    	; 0x14a6 <pf_read+0x1ac>
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
    133e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1340:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1342:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1344:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1346:	48 8d       	ldd	r20, Y+24	; 0x18
    1348:	59 8d       	ldd	r21, Y+25	; 0x19
    134a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    134c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    134e:	84 1b       	sub	r24, r20
    1350:	95 0b       	sbc	r25, r21
    1352:	a6 0b       	sbc	r26, r22
    1354:	b7 0b       	sbc	r27, r23
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */
    1356:	a6 01       	movw	r20, r12
    1358:	60 e0       	ldi	r22, 0x00	; 0
    135a:	70 e0       	ldi	r23, 0x00	; 0
    135c:	84 17       	cp	r24, r20
    135e:	95 07       	cpc	r25, r21
    1360:	a6 07       	cpc	r26, r22
    1362:	b7 07       	cpc	r27, r23
    1364:	08 f4       	brcc	.+2      	; 0x1368 <pf_read+0x6e>
    1366:	6c 01       	movw	r12, r24

	while (btr)	{									/* Repeat until all data transferred */
    1368:	c1 14       	cp	r12, r1
    136a:	d1 04       	cpc	r13, r1
    136c:	09 f4       	brne	.+2      	; 0x1370 <pf_read+0x76>
    136e:	9d c0       	rjmp	.+314    	; 0x14aa <pf_read+0x1b0>
    1370:	52 01       	movw	r10, r4
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fr_abort;
			fs->dsect = sect + fs->csect++;
		}
		rcnt = 512 - ((WORD)fs->fptr % 512);		/* Get partial sector data from sector buffer */
    1372:	81 2c       	mov	r8, r1
    1374:	68 94       	set
    1376:	99 24       	eor	r9, r9
    1378:	91 f8       	bld	r9, 1
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
    137a:	31 2c       	mov	r3, r1
    137c:	21 2c       	mov	r2, r1

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
    137e:	e8 8c       	ldd	r14, Y+24	; 0x18
    1380:	f9 8c       	ldd	r15, Y+25	; 0x19
    1382:	0a 8d       	ldd	r16, Y+26	; 0x1a
    1384:	1b 8d       	ldd	r17, Y+27	; 0x1b
    1386:	d8 01       	movw	r26, r16
    1388:	c7 01       	movw	r24, r14
    138a:	91 70       	andi	r25, 0x01	; 1
    138c:	aa 27       	eor	r26, r26
    138e:	bb 27       	eor	r27, r27
    1390:	89 2b       	or	r24, r25
    1392:	8a 2b       	or	r24, r26
    1394:	8b 2b       	or	r24, r27
    1396:	09 f0       	breq	.+2      	; 0x139a <pf_read+0xa0>
    1398:	49 c0       	rjmp	.+146    	; 0x142c <pf_read+0x132>
			if ((fs->fptr / 512 % fs->csize) == 0) {	/* On the cluster boundary? */
    139a:	29 81       	ldd	r18, Y+1	; 0x01
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	40 e0       	ldi	r20, 0x00	; 0
    13a0:	50 e0       	ldi	r21, 0x00	; 0
    13a2:	c8 01       	movw	r24, r16
    13a4:	b7 01       	movw	r22, r14
    13a6:	05 2e       	mov	r0, r21
    13a8:	59 e0       	ldi	r21, 0x09	; 9
    13aa:	96 95       	lsr	r25
    13ac:	87 95       	ror	r24
    13ae:	77 95       	ror	r23
    13b0:	67 95       	ror	r22
    13b2:	5a 95       	dec	r21
    13b4:	d1 f7       	brne	.-12     	; 0x13aa <pf_read+0xb0>
    13b6:	50 2d       	mov	r21, r0
    13b8:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <__udivmodsi4>
    13bc:	67 2b       	or	r22, r23
    13be:	68 2b       	or	r22, r24
    13c0:	69 2b       	or	r22, r25
    13c2:	d1 f4       	brne	.+52     	; 0x13f8 <pf_read+0xfe>
				clst = (fs->fptr == 0) ?			/* On the top of the file? */
					fs->org_clust : get_fat(fs->curr_clust);
    13c4:	ef 28       	or	r14, r15
    13c6:	e0 2a       	or	r14, r16
    13c8:	e1 2a       	or	r14, r17
    13ca:	29 f4       	brne	.+10     	; 0x13d6 <pf_read+0xdc>
    13cc:	68 a1       	ldd	r22, Y+32	; 0x20
    13ce:	79 a1       	ldd	r23, Y+33	; 0x21
    13d0:	8a a1       	ldd	r24, Y+34	; 0x22
    13d2:	9b a1       	ldd	r25, Y+35	; 0x23
    13d4:	06 c0       	rjmp	.+12     	; 0x13e2 <pf_read+0xe8>
    13d6:	6c a1       	ldd	r22, Y+36	; 0x24
    13d8:	7d a1       	ldd	r23, Y+37	; 0x25
    13da:	8e a1       	ldd	r24, Y+38	; 0x26
    13dc:	9f a1       	ldd	r25, Y+39	; 0x27
    13de:	0e 94 44 05 	call	0xa88	; 0xa88 <get_fat>
				if (clst <= 1) goto fr_abort;
    13e2:	62 30       	cpi	r22, 0x02	; 2
    13e4:	71 05       	cpc	r23, r1
    13e6:	81 05       	cpc	r24, r1
    13e8:	91 05       	cpc	r25, r1
    13ea:	08 f4       	brcc	.+2      	; 0x13ee <pf_read+0xf4>
    13ec:	57 c0       	rjmp	.+174    	; 0x149c <pf_read+0x1a2>
				fs->curr_clust = clst;				/* Update current cluster */
    13ee:	6c a3       	std	Y+36, r22	; 0x24
    13f0:	7d a3       	std	Y+37, r23	; 0x25
    13f2:	8e a3       	std	Y+38, r24	; 0x26
    13f4:	9f a3       	std	Y+39, r25	; 0x27
				fs->csect = 0;						/* Reset sector offset in the cluster */
    13f6:	1b 82       	std	Y+3, r1	; 0x03
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
    13f8:	6c a1       	ldd	r22, Y+36	; 0x24
    13fa:	7d a1       	ldd	r23, Y+37	; 0x25
    13fc:	8e a1       	ldd	r24, Y+38	; 0x26
    13fe:	9f a1       	ldd	r25, Y+39	; 0x27
    1400:	0e 94 7e 04 	call	0x8fc	; 0x8fc <clust2sect>
			if (!sect) goto fr_abort;
    1404:	61 15       	cp	r22, r1
    1406:	71 05       	cpc	r23, r1
    1408:	81 05       	cpc	r24, r1
    140a:	91 05       	cpc	r25, r1
    140c:	09 f4       	brne	.+2      	; 0x1410 <pf_read+0x116>
    140e:	46 c0       	rjmp	.+140    	; 0x149c <pf_read+0x1a2>
			fs->dsect = sect + fs->csect++;
    1410:	2b 81       	ldd	r18, Y+3	; 0x03
    1412:	31 e0       	ldi	r19, 0x01	; 1
    1414:	32 0f       	add	r19, r18
    1416:	3b 83       	std	Y+3, r19	; 0x03
    1418:	dc 01       	movw	r26, r24
    141a:	cb 01       	movw	r24, r22
    141c:	82 0f       	add	r24, r18
    141e:	91 1d       	adc	r25, r1
    1420:	a1 1d       	adc	r26, r1
    1422:	b1 1d       	adc	r27, r1
    1424:	88 a7       	std	Y+40, r24	; 0x28
    1426:	99 a7       	std	Y+41, r25	; 0x29
    1428:	aa a7       	std	Y+42, r26	; 0x2a
    142a:	bb a7       	std	Y+43, r27	; 0x2b
		}
		rcnt = 512 - ((WORD)fs->fptr % 512);		/* Get partial sector data from sector buffer */
    142c:	28 8d       	ldd	r18, Y+24	; 0x18
    142e:	39 8d       	ldd	r19, Y+25	; 0x19
    1430:	31 70       	andi	r19, 0x01	; 1
    1432:	c4 01       	movw	r24, r8
    1434:	82 1b       	sub	r24, r18
    1436:	93 0b       	sbc	r25, r19
    1438:	76 01       	movw	r14, r12
    143a:	8c 15       	cp	r24, r12
    143c:	9d 05       	cpc	r25, r13
    143e:	08 f4       	brcc	.+2      	; 0x1442 <pf_read+0x148>
    1440:	7c 01       	movw	r14, r24
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
    1442:	48 a5       	ldd	r20, Y+40	; 0x28
    1444:	59 a5       	ldd	r21, Y+41	; 0x29
    1446:	6a a5       	ldd	r22, Y+42	; 0x2a
    1448:	7b a5       	ldd	r23, Y+43	; 0x2b
    144a:	41 14       	cp	r4, r1
    144c:	51 04       	cpc	r5, r1
    144e:	19 f4       	brne	.+6      	; 0x1456 <pf_read+0x15c>
    1450:	83 2d       	mov	r24, r3
    1452:	92 2d       	mov	r25, r2
    1454:	02 c0       	rjmp	.+4      	; 0x145a <pf_read+0x160>
    1456:	8a 2d       	mov	r24, r10
    1458:	9b 2d       	mov	r25, r11
    145a:	87 01       	movw	r16, r14
    145c:	0e 94 c4 02 	call	0x588	; 0x588 <disk_readp>
		if (dr) goto fr_abort;
    1460:	81 11       	cpse	r24, r1
    1462:	1c c0       	rjmp	.+56     	; 0x149c <pf_read+0x1a2>
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
    1464:	88 8d       	ldd	r24, Y+24	; 0x18
    1466:	99 8d       	ldd	r25, Y+25	; 0x19
    1468:	aa 8d       	ldd	r26, Y+26	; 0x1a
    146a:	bb 8d       	ldd	r27, Y+27	; 0x1b
    146c:	8e 0d       	add	r24, r14
    146e:	9f 1d       	adc	r25, r15
    1470:	a1 1d       	adc	r26, r1
    1472:	b1 1d       	adc	r27, r1
    1474:	88 8f       	std	Y+24, r24	; 0x18
    1476:	99 8f       	std	Y+25, r25	; 0x19
    1478:	aa 8f       	std	Y+26, r26	; 0x1a
    147a:	bb 8f       	std	Y+27, r27	; 0x1b
    147c:	ae 0c       	add	r10, r14
    147e:	bf 1c       	adc	r11, r15
		btr -= rcnt; *br += rcnt;
    1480:	ce 18       	sub	r12, r14
    1482:	df 08       	sbc	r13, r15
    1484:	f3 01       	movw	r30, r6
    1486:	80 81       	ld	r24, Z
    1488:	91 81       	ldd	r25, Z+1	; 0x01
    148a:	e8 0e       	add	r14, r24
    148c:	f9 1e       	adc	r15, r25
    148e:	f1 82       	std	Z+1, r15	; 0x01
    1490:	e0 82       	st	Z, r14
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
    1492:	c1 14       	cp	r12, r1
    1494:	d1 04       	cpc	r13, r1
    1496:	09 f0       	breq	.+2      	; 0x149a <pf_read+0x1a0>
    1498:	72 cf       	rjmp	.-284    	; 0x137e <pf_read+0x84>
    149a:	09 c0       	rjmp	.+18     	; 0x14ae <pf_read+0x1b4>
	}

	return FR_OK;

fr_abort:
	fs->flag = 0;
    149c:	1a 82       	std	Y+2, r1	; 0x02
	return FR_DISK_ERR;
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	07 c0       	rjmp	.+14     	; 0x14b0 <pf_read+0x1b6>
	WORD rcnt;
	FATFS *fs = FatFs;


	*br = 0;
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    14a2:	86 e0       	ldi	r24, 0x06	; 6
    14a4:	05 c0       	rjmp	.+10     	; 0x14b0 <pf_read+0x1b6>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
		return FR_NOT_OPENED;
    14a6:	85 e0       	ldi	r24, 0x05	; 5
    14a8:	03 c0       	rjmp	.+6      	; 0x14b0 <pf_read+0x1b6>
		if (dr) goto fr_abort;
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
		btr -= rcnt; *br += rcnt;
	}

	return FR_OK;
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	01 c0       	rjmp	.+2      	; 0x14b0 <pf_read+0x1b6>
    14ae:	80 e0       	ldi	r24, 0x00	; 0

fr_abort:
	fs->flag = 0;
	return FR_DISK_ERR;
}
    14b0:	df 91       	pop	r29
    14b2:	cf 91       	pop	r28
    14b4:	1f 91       	pop	r17
    14b6:	0f 91       	pop	r16
    14b8:	ff 90       	pop	r15
    14ba:	ef 90       	pop	r14
    14bc:	df 90       	pop	r13
    14be:	cf 90       	pop	r12
    14c0:	bf 90       	pop	r11
    14c2:	af 90       	pop	r10
    14c4:	9f 90       	pop	r9
    14c6:	8f 90       	pop	r8
    14c8:	7f 90       	pop	r7
    14ca:	6f 90       	pop	r6
    14cc:	5f 90       	pop	r5
    14ce:	4f 90       	pop	r4
    14d0:	3f 90       	pop	r3
    14d2:	2f 90       	pop	r2
    14d4:	08 95       	ret

000014d6 <pf_lseek>:
#if _USE_LSEEK

FRESULT pf_lseek (
	DWORD ofs		/* File pointer from top of file */
)
{
    14d6:	2f 92       	push	r2
    14d8:	3f 92       	push	r3
    14da:	4f 92       	push	r4
    14dc:	5f 92       	push	r5
    14de:	6f 92       	push	r6
    14e0:	7f 92       	push	r7
    14e2:	8f 92       	push	r8
    14e4:	9f 92       	push	r9
    14e6:	af 92       	push	r10
    14e8:	bf 92       	push	r11
    14ea:	cf 92       	push	r12
    14ec:	df 92       	push	r13
    14ee:	ef 92       	push	r14
    14f0:	ff 92       	push	r15
    14f2:	0f 93       	push	r16
    14f4:	1f 93       	push	r17
    14f6:	cf 93       	push	r28
    14f8:	df 93       	push	r29
    14fa:	00 d0       	rcall	.+0      	; 0x14fc <pf_lseek+0x26>
    14fc:	00 d0       	rcall	.+0      	; 0x14fe <pf_lseek+0x28>
    14fe:	cd b7       	in	r28, 0x3d	; 61
    1500:	de b7       	in	r29, 0x3e	; 62
    1502:	36 2f       	mov	r19, r22
    1504:	e7 2f       	mov	r30, r23
	CLUST clst;
	DWORD bcs, sect, ifptr;
	FATFS *fs = FatFs;
    1506:	20 90 f9 00 	lds	r2, 0x00F9
    150a:	30 90 fa 00 	lds	r3, 0x00FA


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    150e:	21 14       	cp	r2, r1
    1510:	31 04       	cpc	r3, r1
    1512:	09 f4       	brne	.+2      	; 0x1516 <pf_lseek+0x40>
    1514:	f7 c0       	rjmp	.+494    	; 0x1704 <pf_lseek+0x22e>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    1516:	d1 01       	movw	r26, r2
    1518:	12 96       	adiw	r26, 0x02	; 2
    151a:	2c 91       	ld	r18, X
    151c:	12 97       	sbiw	r26, 0x02	; 2
    151e:	20 ff       	sbrs	r18, 0
    1520:	f3 c0       	rjmp	.+486    	; 0x1708 <pf_lseek+0x232>
			return FR_NOT_OPENED;

	if (ofs > fs->fsize) ofs = fs->fsize;	/* Clip offset with the file size */
    1522:	5c 96       	adiw	r26, 0x1c	; 28
    1524:	4d 91       	ld	r20, X+
    1526:	5d 91       	ld	r21, X+
    1528:	6d 91       	ld	r22, X+
    152a:	7c 91       	ld	r23, X
    152c:	5f 97       	sbiw	r26, 0x1f	; 31
    152e:	c3 2e       	mov	r12, r19
    1530:	de 2e       	mov	r13, r30
    1532:	e8 2e       	mov	r14, r24
    1534:	f9 2e       	mov	r15, r25
    1536:	4c 15       	cp	r20, r12
    1538:	5d 05       	cpc	r21, r13
    153a:	6e 05       	cpc	r22, r14
    153c:	7f 05       	cpc	r23, r15
    153e:	10 f4       	brcc	.+4      	; 0x1544 <pf_lseek+0x6e>
    1540:	6a 01       	movw	r12, r20
    1542:	7b 01       	movw	r14, r22
	ifptr = fs->fptr;
    1544:	f1 01       	movw	r30, r2
    1546:	80 8d       	ldd	r24, Z+24	; 0x18
    1548:	91 8d       	ldd	r25, Z+25	; 0x19
    154a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    154c:	b3 8d       	ldd	r27, Z+27	; 0x1b
	fs->fptr = 0;
    154e:	10 8e       	std	Z+24, r1	; 0x18
    1550:	11 8e       	std	Z+25, r1	; 0x19
    1552:	12 8e       	std	Z+26, r1	; 0x1a
    1554:	13 8e       	std	Z+27, r1	; 0x1b
	if (ofs > 0) {
    1556:	c1 14       	cp	r12, r1
    1558:	d1 04       	cpc	r13, r1
    155a:	e1 04       	cpc	r14, r1
    155c:	f1 04       	cpc	r15, r1
    155e:	09 f4       	brne	.+2      	; 0x1562 <pf_lseek+0x8c>
    1560:	d5 c0       	rjmp	.+426    	; 0x170c <pf_lseek+0x236>
		bcs = (DWORD)fs->csize * 512;	/* Cluster size (byte) */
    1562:	81 80       	ldd	r8, Z+1	; 0x01
    1564:	91 2c       	mov	r9, r1
    1566:	a1 2c       	mov	r10, r1
    1568:	b1 2c       	mov	r11, r1
    156a:	07 2e       	mov	r0, r23
    156c:	79 e0       	ldi	r23, 0x09	; 9
    156e:	88 0c       	add	r8, r8
    1570:	99 1c       	adc	r9, r9
    1572:	aa 1c       	adc	r10, r10
    1574:	bb 1c       	adc	r11, r11
    1576:	7a 95       	dec	r23
    1578:	d1 f7       	brne	.-12     	; 0x156e <pf_lseek+0x98>
    157a:	70 2d       	mov	r23, r0
		if (ifptr > 0 &&
    157c:	00 97       	sbiw	r24, 0x00	; 0
    157e:	a1 05       	cpc	r26, r1
    1580:	b1 05       	cpc	r27, r1
    1582:	09 f4       	brne	.+2      	; 0x1586 <pf_lseek+0xb0>
    1584:	41 c0       	rjmp	.+130    	; 0x1608 <pf_lseek+0x132>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    1586:	2c 01       	movw	r4, r24
    1588:	3d 01       	movw	r6, r26
    158a:	f1 e0       	ldi	r31, 0x01	; 1
    158c:	4f 1a       	sub	r4, r31
    158e:	51 08       	sbc	r5, r1
    1590:	61 08       	sbc	r6, r1
    1592:	71 08       	sbc	r7, r1
    1594:	c7 01       	movw	r24, r14
    1596:	b6 01       	movw	r22, r12
    1598:	61 50       	subi	r22, 0x01	; 1
    159a:	71 09       	sbc	r23, r1
    159c:	81 09       	sbc	r24, r1
    159e:	91 09       	sbc	r25, r1
    15a0:	a5 01       	movw	r20, r10
    15a2:	94 01       	movw	r18, r8
    15a4:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <__udivmodsi4>
    15a8:	29 83       	std	Y+1, r18	; 0x01
    15aa:	3a 83       	std	Y+2, r19	; 0x02
    15ac:	4b 83       	std	Y+3, r20	; 0x03
    15ae:	5c 83       	std	Y+4, r21	; 0x04
    15b0:	c3 01       	movw	r24, r6
    15b2:	b2 01       	movw	r22, r4
    15b4:	a5 01       	movw	r20, r10
    15b6:	94 01       	movw	r18, r8
    15b8:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <__udivmodsi4>
	if (ofs > fs->fsize) ofs = fs->fsize;	/* Clip offset with the file size */
	ifptr = fs->fptr;
	fs->fptr = 0;
	if (ofs > 0) {
		bcs = (DWORD)fs->csize * 512;	/* Cluster size (byte) */
		if (ifptr > 0 &&
    15bc:	89 81       	ldd	r24, Y+1	; 0x01
    15be:	9a 81       	ldd	r25, Y+2	; 0x02
    15c0:	ab 81       	ldd	r26, Y+3	; 0x03
    15c2:	bc 81       	ldd	r27, Y+4	; 0x04
    15c4:	82 17       	cp	r24, r18
    15c6:	93 07       	cpc	r25, r19
    15c8:	a4 07       	cpc	r26, r20
    15ca:	b5 07       	cpc	r27, r21
    15cc:	e8 f0       	brcs	.+58     	; 0x1608 <pf_lseek+0x132>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fs->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    15ce:	88 27       	eor	r24, r24
    15d0:	99 27       	eor	r25, r25
    15d2:	dc 01       	movw	r26, r24
    15d4:	88 19       	sub	r24, r8
    15d6:	99 09       	sbc	r25, r9
    15d8:	aa 09       	sbc	r26, r10
    15da:	bb 09       	sbc	r27, r11
    15dc:	48 22       	and	r4, r24
    15de:	59 22       	and	r5, r25
    15e0:	6a 22       	and	r6, r26
    15e2:	7b 22       	and	r7, r27
    15e4:	d1 01       	movw	r26, r2
    15e6:	58 96       	adiw	r26, 0x18	; 24
    15e8:	4d 92       	st	X+, r4
    15ea:	5d 92       	st	X+, r5
    15ec:	6d 92       	st	X+, r6
    15ee:	7c 92       	st	X, r7
    15f0:	5b 97       	sbiw	r26, 0x1b	; 27
			ofs -= fs->fptr;
    15f2:	c4 18       	sub	r12, r4
    15f4:	d5 08       	sbc	r13, r5
    15f6:	e6 08       	sbc	r14, r6
    15f8:	f7 08       	sbc	r15, r7
			clst = fs->curr_clust;
    15fa:	94 96       	adiw	r26, 0x24	; 36
    15fc:	6d 91       	ld	r22, X+
    15fe:	7d 91       	ld	r23, X+
    1600:	8d 91       	ld	r24, X+
    1602:	9c 91       	ld	r25, X
    1604:	97 97       	sbiw	r26, 0x27	; 39
    1606:	09 c0       	rjmp	.+18     	; 0x161a <pf_lseek+0x144>
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
    1608:	f1 01       	movw	r30, r2
    160a:	60 a1       	ldd	r22, Z+32	; 0x20
    160c:	71 a1       	ldd	r23, Z+33	; 0x21
    160e:	82 a1       	ldd	r24, Z+34	; 0x22
    1610:	93 a1       	ldd	r25, Z+35	; 0x23
			fs->curr_clust = clst;
    1612:	64 a3       	std	Z+36, r22	; 0x24
    1614:	75 a3       	std	Z+37, r23	; 0x25
    1616:	86 a3       	std	Z+38, r24	; 0x26
    1618:	97 a3       	std	Z+39, r25	; 0x27
		}
		while (ofs > bcs) {				/* Cluster following loop */
    161a:	8c 14       	cp	r8, r12
    161c:	9d 04       	cpc	r9, r13
    161e:	ae 04       	cpc	r10, r14
    1620:	bf 04       	cpc	r11, r15
    1622:	60 f5       	brcc	.+88     	; 0x167c <pf_lseek+0x1a6>
			clst = get_fat(clst);		/* Follow cluster chain */
    1624:	0e 94 44 05 	call	0xa88	; 0xa88 <get_fat>
			if (clst <= 1 || clst >= fs->max_clust) goto fe_abort;
    1628:	62 30       	cpi	r22, 0x02	; 2
    162a:	71 05       	cpc	r23, r1
    162c:	81 05       	cpc	r24, r1
    162e:	91 05       	cpc	r25, r1
    1630:	08 f4       	brcc	.+2      	; 0x1634 <pf_lseek+0x15e>
    1632:	63 c0       	rjmp	.+198    	; 0x16fa <pf_lseek+0x224>
    1634:	f1 01       	movw	r30, r2
    1636:	00 85       	ldd	r16, Z+8	; 0x08
    1638:	11 85       	ldd	r17, Z+9	; 0x09
    163a:	22 85       	ldd	r18, Z+10	; 0x0a
    163c:	33 85       	ldd	r19, Z+11	; 0x0b
    163e:	60 17       	cp	r22, r16
    1640:	71 07       	cpc	r23, r17
    1642:	82 07       	cpc	r24, r18
    1644:	93 07       	cpc	r25, r19
    1646:	08 f0       	brcs	.+2      	; 0x164a <pf_lseek+0x174>
    1648:	58 c0       	rjmp	.+176    	; 0x16fa <pf_lseek+0x224>
			fs->curr_clust = clst;
    164a:	64 a3       	std	Z+36, r22	; 0x24
    164c:	75 a3       	std	Z+37, r23	; 0x25
    164e:	86 a3       	std	Z+38, r24	; 0x26
    1650:	97 a3       	std	Z+39, r25	; 0x27
			fs->fptr += bcs;
    1652:	00 8d       	ldd	r16, Z+24	; 0x18
    1654:	11 8d       	ldd	r17, Z+25	; 0x19
    1656:	22 8d       	ldd	r18, Z+26	; 0x1a
    1658:	33 8d       	ldd	r19, Z+27	; 0x1b
    165a:	08 0d       	add	r16, r8
    165c:	19 1d       	adc	r17, r9
    165e:	2a 1d       	adc	r18, r10
    1660:	3b 1d       	adc	r19, r11
    1662:	00 8f       	std	Z+24, r16	; 0x18
    1664:	11 8f       	std	Z+25, r17	; 0x19
    1666:	22 8f       	std	Z+26, r18	; 0x1a
    1668:	33 8f       	std	Z+27, r19	; 0x1b
			ofs -= bcs;
    166a:	c8 18       	sub	r12, r8
    166c:	d9 08       	sbc	r13, r9
    166e:	ea 08       	sbc	r14, r10
    1670:	fb 08       	sbc	r15, r11
			clst = fs->curr_clust;
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
			fs->curr_clust = clst;
		}
		while (ofs > bcs) {				/* Cluster following loop */
    1672:	8c 14       	cp	r8, r12
    1674:	9d 04       	cpc	r9, r13
    1676:	ae 04       	cpc	r10, r14
    1678:	bf 04       	cpc	r11, r15
    167a:	a0 f2       	brcs	.-88     	; 0x1624 <pf_lseek+0x14e>
			if (clst <= 1 || clst >= fs->max_clust) goto fe_abort;
			fs->curr_clust = clst;
			fs->fptr += bcs;
			ofs -= bcs;
		}
		fs->fptr += ofs;
    167c:	d1 01       	movw	r26, r2
    167e:	58 96       	adiw	r26, 0x18	; 24
    1680:	0d 91       	ld	r16, X+
    1682:	1d 91       	ld	r17, X+
    1684:	2d 91       	ld	r18, X+
    1686:	3c 91       	ld	r19, X
    1688:	5b 97       	sbiw	r26, 0x1b	; 27
    168a:	0c 0d       	add	r16, r12
    168c:	1d 1d       	adc	r17, r13
    168e:	2e 1d       	adc	r18, r14
    1690:	3f 1d       	adc	r19, r15
    1692:	f1 01       	movw	r30, r2
    1694:	00 8f       	std	Z+24, r16	; 0x18
    1696:	11 8f       	std	Z+25, r17	; 0x19
    1698:	22 8f       	std	Z+26, r18	; 0x1a
    169a:	33 8f       	std	Z+27, r19	; 0x1b
		sect = clust2sect(clst);		/* Current sector */
    169c:	0e 94 7e 04 	call	0x8fc	; 0x8fc <clust2sect>
		if (!sect) goto fe_abort;
    16a0:	61 15       	cp	r22, r1
    16a2:	71 05       	cpc	r23, r1
    16a4:	81 05       	cpc	r24, r1
    16a6:	91 05       	cpc	r25, r1
    16a8:	41 f1       	breq	.+80     	; 0x16fa <pf_lseek+0x224>
		fs->csect = (BYTE)(ofs / 512);	/* Sector offset in the cluster */
    16aa:	97 01       	movw	r18, r14
    16ac:	86 01       	movw	r16, r12
    16ae:	0f 2e       	mov	r0, r31
    16b0:	f9 e0       	ldi	r31, 0x09	; 9
    16b2:	36 95       	lsr	r19
    16b4:	27 95       	ror	r18
    16b6:	17 95       	ror	r17
    16b8:	07 95       	ror	r16
    16ba:	fa 95       	dec	r31
    16bc:	d1 f7       	brne	.-12     	; 0x16b2 <pf_lseek+0x1dc>
    16be:	f0 2d       	mov	r31, r0
		if (ofs % 512)
    16c0:	f1 e0       	ldi	r31, 0x01	; 1
    16c2:	df 22       	and	r13, r31
    16c4:	ee 24       	eor	r14, r14
    16c6:	ff 24       	eor	r15, r15
    16c8:	cd 28       	or	r12, r13
    16ca:	ce 28       	or	r12, r14
    16cc:	cf 28       	or	r12, r15
    16ce:	29 f4       	brne	.+10     	; 0x16da <pf_lseek+0x204>
			ofs -= bcs;
		}
		fs->fptr += ofs;
		sect = clust2sect(clst);		/* Current sector */
		if (!sect) goto fe_abort;
		fs->csect = (BYTE)(ofs / 512);	/* Sector offset in the cluster */
    16d0:	d1 01       	movw	r26, r2
    16d2:	13 96       	adiw	r26, 0x03	; 3
    16d4:	0c 93       	st	X, r16
		if (ofs % 512)
			fs->dsect = sect + fs->csect++;
	}

	return FR_OK;
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	1a c0       	rjmp	.+52     	; 0x170e <pf_lseek+0x238>
		fs->fptr += ofs;
		sect = clust2sect(clst);		/* Current sector */
		if (!sect) goto fe_abort;
		fs->csect = (BYTE)(ofs / 512);	/* Sector offset in the cluster */
		if (ofs % 512)
			fs->dsect = sect + fs->csect++;
    16da:	41 e0       	ldi	r20, 0x01	; 1
    16dc:	40 0f       	add	r20, r16
    16de:	f1 01       	movw	r30, r2
    16e0:	43 83       	std	Z+3, r20	; 0x03
    16e2:	dc 01       	movw	r26, r24
    16e4:	cb 01       	movw	r24, r22
    16e6:	80 0f       	add	r24, r16
    16e8:	91 1d       	adc	r25, r1
    16ea:	a1 1d       	adc	r26, r1
    16ec:	b1 1d       	adc	r27, r1
    16ee:	80 a7       	std	Z+40, r24	; 0x28
    16f0:	91 a7       	std	Z+41, r25	; 0x29
    16f2:	a2 a7       	std	Z+42, r26	; 0x2a
    16f4:	b3 a7       	std	Z+43, r27	; 0x2b
	}

	return FR_OK;
    16f6:	80 e0       	ldi	r24, 0x00	; 0
    16f8:	0a c0       	rjmp	.+20     	; 0x170e <pf_lseek+0x238>

fe_abort:
	fs->flag = 0;
    16fa:	d1 01       	movw	r26, r2
    16fc:	12 96       	adiw	r26, 0x02	; 2
    16fe:	1c 92       	st	X, r1
	return FR_DISK_ERR;
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	05 c0       	rjmp	.+10     	; 0x170e <pf_lseek+0x238>
	CLUST clst;
	DWORD bcs, sect, ifptr;
	FATFS *fs = FatFs;


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    1704:	86 e0       	ldi	r24, 0x06	; 6
    1706:	03 c0       	rjmp	.+6      	; 0x170e <pf_lseek+0x238>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
			return FR_NOT_OPENED;
    1708:	85 e0       	ldi	r24, 0x05	; 5
    170a:	01 c0       	rjmp	.+2      	; 0x170e <pf_lseek+0x238>
		fs->csect = (BYTE)(ofs / 512);	/* Sector offset in the cluster */
		if (ofs % 512)
			fs->dsect = sect + fs->csect++;
	}

	return FR_OK;
    170c:	80 e0       	ldi	r24, 0x00	; 0

fe_abort:
	fs->flag = 0;
	return FR_DISK_ERR;
}
    170e:	0f 90       	pop	r0
    1710:	0f 90       	pop	r0
    1712:	0f 90       	pop	r0
    1714:	0f 90       	pop	r0
    1716:	df 91       	pop	r29
    1718:	cf 91       	pop	r28
    171a:	1f 91       	pop	r17
    171c:	0f 91       	pop	r16
    171e:	ff 90       	pop	r15
    1720:	ef 90       	pop	r14
    1722:	df 90       	pop	r13
    1724:	cf 90       	pop	r12
    1726:	bf 90       	pop	r11
    1728:	af 90       	pop	r10
    172a:	9f 90       	pop	r9
    172c:	8f 90       	pop	r8
    172e:	7f 90       	pop	r7
    1730:	6f 90       	pop	r6
    1732:	5f 90       	pop	r5
    1734:	4f 90       	pop	r4
    1736:	3f 90       	pop	r3
    1738:	2f 90       	pop	r2
    173a:	08 95       	ret

0000173c <pf_opendir>:

FRESULT pf_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const char *path	/* Pointer to the directory path */
)
{
    173c:	0f 93       	push	r16
    173e:	1f 93       	push	r17
    1740:	cf 93       	push	r28
    1742:	df 93       	push	r29
    1744:	cd b7       	in	r28, 0x3d	; 61
    1746:	de b7       	in	r29, 0x3e	; 62
    1748:	ac 97       	sbiw	r28, 0x2c	; 44
    174a:	0f b6       	in	r0, 0x3f	; 63
    174c:	f8 94       	cli
    174e:	de bf       	out	0x3e, r29	; 62
    1750:	0f be       	out	0x3f, r0	; 63
    1752:	cd bf       	out	0x3d, r28	; 61
    1754:	8c 01       	movw	r16, r24
	FRESULT res;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
    1756:	e0 91 f9 00 	lds	r30, 0x00F9
    175a:	f0 91 fa 00 	lds	r31, 0x00FA


	if (!fs) {				/* Check file system */
    175e:	30 97       	sbiw	r30, 0x00	; 0
    1760:	69 f1       	breq	.+90     	; 0x17bc <pf_opendir+0x80>
		res = FR_NOT_ENABLED;
	} else {
		fs->buf = dir;
    1762:	ce 01       	movw	r24, r28
    1764:	0d 96       	adiw	r24, 0x0d	; 13
    1766:	97 83       	std	Z+7, r25	; 0x07
    1768:	86 83       	std	Z+6, r24	; 0x06
		dj->fn = sp;
    176a:	0c 97       	sbiw	r24, 0x0c	; 12
    176c:	f8 01       	movw	r30, r16
    176e:	93 83       	std	Z+3, r25	; 0x03
    1770:	82 83       	std	Z+2, r24	; 0x02
		res = follow_path(dj, path);			/* Follow the path to the directory */
    1772:	c8 01       	movw	r24, r16
    1774:	0e 94 d3 06 	call	0xda6	; 0xda6 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
    1778:	81 11       	cpse	r24, r1
    177a:	1b c0       	rjmp	.+54     	; 0x17b2 <pf_opendir+0x76>
			if (dir[0]) {						/* It is not the root dir */
    177c:	8d 85       	ldd	r24, Y+13	; 0x0d
    177e:	88 23       	and	r24, r24
    1780:	09 f1       	breq	.+66     	; 0x17c4 <pf_opendir+0x88>
				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    1782:	88 8d       	ldd	r24, Y+24	; 0x18
    1784:	84 ff       	sbrs	r24, 4
    1786:	18 c0       	rjmp	.+48     	; 0x17b8 <pf_opendir+0x7c>
					dj->sclust =
#if _FS_FAT32
					((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) |
    1788:	49 a1       	ldd	r20, Y+33	; 0x21
    178a:	5a a1       	ldd	r21, Y+34	; 0x22
    178c:	60 e0       	ldi	r22, 0x00	; 0
    178e:	70 e0       	ldi	r23, 0x00	; 0
    1790:	ba 01       	movw	r22, r20
    1792:	55 27       	eor	r21, r21
    1794:	44 27       	eor	r20, r20
    1796:	8f a1       	ldd	r24, Y+39	; 0x27
    1798:	98 a5       	ldd	r25, Y+40	; 0x28
    179a:	a0 e0       	ldi	r26, 0x00	; 0
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	48 2b       	or	r20, r24
    17a0:	59 2b       	or	r21, r25
    17a2:	6a 2b       	or	r22, r26
    17a4:	7b 2b       	or	r23, r27
		dj->fn = sp;
		res = follow_path(dj, path);			/* Follow the path to the directory */
		if (res == FR_OK) {						/* Follow completed */
			if (dir[0]) {						/* It is not the root dir */
				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
					dj->sclust =
    17a6:	f8 01       	movw	r30, r16
    17a8:	44 83       	std	Z+4, r20	; 0x04
    17aa:	55 83       	std	Z+5, r21	; 0x05
    17ac:	66 83       	std	Z+6, r22	; 0x06
    17ae:	77 83       	std	Z+7, r23	; 0x07
    17b0:	09 c0       	rjmp	.+18     	; 0x17c4 <pf_opendir+0x88>
				}
			}
			if (res == FR_OK)
				res = dir_rewind(dj);			/* Rewind dir */
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    17b2:	83 30       	cpi	r24, 0x03	; 3
    17b4:	29 f0       	breq	.+10     	; 0x17c0 <pf_opendir+0x84>
    17b6:	0a c0       	rjmp	.+20     	; 0x17cc <pf_opendir+0x90>
#if _FS_FAT32
					((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) |
#endif
					LD_WORD(dir+DIR_FstClusLO);
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
    17b8:	84 e0       	ldi	r24, 0x04	; 4
    17ba:	08 c0       	rjmp	.+16     	; 0x17cc <pf_opendir+0x90>
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;


	if (!fs) {				/* Check file system */
		res = FR_NOT_ENABLED;
    17bc:	86 e0       	ldi	r24, 0x06	; 6
    17be:	06 c0       	rjmp	.+12     	; 0x17cc <pf_opendir+0x90>
				}
			}
			if (res == FR_OK)
				res = dir_rewind(dj);			/* Rewind dir */
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    17c0:	84 e0       	ldi	r24, 0x04	; 4
    17c2:	04 c0       	rjmp	.+8      	; 0x17cc <pf_opendir+0x90>
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK)
				res = dir_rewind(dj);			/* Rewind dir */
    17c4:	c8 01       	movw	r24, r16
    17c6:	0e 94 a9 04 	call	0x952	; 0x952 <dir_rewind>
    17ca:	f3 cf       	rjmp	.-26     	; 0x17b2 <pf_opendir+0x76>
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}

	return res;
}
    17cc:	ac 96       	adiw	r28, 0x2c	; 44
    17ce:	0f b6       	in	r0, 0x3f	; 63
    17d0:	f8 94       	cli
    17d2:	de bf       	out	0x3e, r29	; 62
    17d4:	0f be       	out	0x3f, r0	; 63
    17d6:	cd bf       	out	0x3d, r28	; 61
    17d8:	df 91       	pop	r29
    17da:	cf 91       	pop	r28
    17dc:	1f 91       	pop	r17
    17de:	0f 91       	pop	r16
    17e0:	08 95       	ret

000017e2 <__udivmodsi4>:
    17e2:	a1 e2       	ldi	r26, 0x21	; 33
    17e4:	1a 2e       	mov	r1, r26
    17e6:	aa 1b       	sub	r26, r26
    17e8:	bb 1b       	sub	r27, r27
    17ea:	fd 01       	movw	r30, r26
    17ec:	0d c0       	rjmp	.+26     	; 0x1808 <__udivmodsi4_ep>

000017ee <__udivmodsi4_loop>:
    17ee:	aa 1f       	adc	r26, r26
    17f0:	bb 1f       	adc	r27, r27
    17f2:	ee 1f       	adc	r30, r30
    17f4:	ff 1f       	adc	r31, r31
    17f6:	a2 17       	cp	r26, r18
    17f8:	b3 07       	cpc	r27, r19
    17fa:	e4 07       	cpc	r30, r20
    17fc:	f5 07       	cpc	r31, r21
    17fe:	20 f0       	brcs	.+8      	; 0x1808 <__udivmodsi4_ep>
    1800:	a2 1b       	sub	r26, r18
    1802:	b3 0b       	sbc	r27, r19
    1804:	e4 0b       	sbc	r30, r20
    1806:	f5 0b       	sbc	r31, r21

00001808 <__udivmodsi4_ep>:
    1808:	66 1f       	adc	r22, r22
    180a:	77 1f       	adc	r23, r23
    180c:	88 1f       	adc	r24, r24
    180e:	99 1f       	adc	r25, r25
    1810:	1a 94       	dec	r1
    1812:	69 f7       	brne	.-38     	; 0x17ee <__udivmodsi4_loop>
    1814:	60 95       	com	r22
    1816:	70 95       	com	r23
    1818:	80 95       	com	r24
    181a:	90 95       	com	r25
    181c:	9b 01       	movw	r18, r22
    181e:	ac 01       	movw	r20, r24
    1820:	bd 01       	movw	r22, r26
    1822:	cf 01       	movw	r24, r30
    1824:	08 95       	ret

00001826 <__muluhisi3>:
    1826:	0e 94 1e 0c 	call	0x183c	; 0x183c <__umulhisi3>
    182a:	a5 9f       	mul	r26, r21
    182c:	90 0d       	add	r25, r0
    182e:	b4 9f       	mul	r27, r20
    1830:	90 0d       	add	r25, r0
    1832:	a4 9f       	mul	r26, r20
    1834:	80 0d       	add	r24, r0
    1836:	91 1d       	adc	r25, r1
    1838:	11 24       	eor	r1, r1
    183a:	08 95       	ret

0000183c <__umulhisi3>:
    183c:	a2 9f       	mul	r26, r18
    183e:	b0 01       	movw	r22, r0
    1840:	b3 9f       	mul	r27, r19
    1842:	c0 01       	movw	r24, r0
    1844:	a3 9f       	mul	r26, r19
    1846:	70 0d       	add	r23, r0
    1848:	81 1d       	adc	r24, r1
    184a:	11 24       	eor	r1, r1
    184c:	91 1d       	adc	r25, r1
    184e:	b2 9f       	mul	r27, r18
    1850:	70 0d       	add	r23, r0
    1852:	81 1d       	adc	r24, r1
    1854:	11 24       	eor	r1, r1
    1856:	91 1d       	adc	r25, r1
    1858:	08 95       	ret

0000185a <_exit>:
    185a:	f8 94       	cli

0000185c <__stop_program>:
    185c:	ff cf       	rjmp	.-2      	; 0x185c <__stop_program>
